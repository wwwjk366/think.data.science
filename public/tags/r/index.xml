<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>R on Think.Data.Science</title>
    <link>/tags/r/</link>
    <description>Recent content in R on Think.Data.Science</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator>
    <language>en-us</language>
    <copyright>{year}</copyright>
    <lastBuildDate>Sun, 21 Jul 2019 20:14:43 +0000</lastBuildDate>
    
	    <atom:link href="/tags/r/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Introducing teamr Package</title>
      <link>/post/2019-07-22-introducing-teamr/</link>
      <pubDate>Sun, 21 Jul 2019 20:14:43 +0000</pubDate>
      
      <guid>/post/2019-07-22-introducing-teamr/</guid>
      <description>

&lt;p&gt;Today I am so pleased to introduce my first CRAN package for sending
formatted messages to Microsoft Teams,
&lt;a href=&#34;https://github.com/wwwjk366/teamr&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;teamr&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Motivation is simple here. For years I have been using Slack and built
many slash commands and apps using incoming webhooks with R, but ever
since I started to use Teams, I found that we will have the same needs
for communicating with R as well. So with some inspiration from the
Python package &lt;a href=&#34;https://pypi.org/project/pymsteams/&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;pymsteams&lt;/code&gt;&lt;/a&gt;. I
created &lt;code&gt;teamr&lt;/code&gt; package with the hope that this package will provide a
simple and clean way to talk to Teams from R.&lt;/p&gt;

&lt;h2 id=&#34;installation&#34;&gt;Installation&lt;/h2&gt;

&lt;p&gt;You can install the released version of teamr from
&lt;a href=&#34;https://CRAN.R-project.org&#34; target=&#34;_blank&#34;&gt;CRAN&lt;/a&gt; with:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&amp;quot;teamr&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And the development version from &lt;a href=&#34;https://github.com/&#34; target=&#34;_blank&#34;&gt;GitHub&lt;/a&gt; with:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# install.packages(&amp;quot;devtools&amp;quot;)
devtools::install_github(&amp;quot;wwwjk366/teamr&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;example&#34;&gt;Example&lt;/h2&gt;

&lt;p&gt;This is a basic example of send a simple titled message to MS Teams:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(teamr)

# initiate new connector card object
cc &amp;lt;- connector_card$new(hookurl = &amp;quot;https://outlook.office.com/webhook/...&amp;quot;)
# add text
cc$text(&amp;quot;This is text of main body.&amp;quot;)
# add title
cc$title(&amp;quot;This is message title&amp;quot;)
# add hyperlink button
cc$add_link_button(&amp;quot;Read more&amp;quot;, &amp;quot;https://www.google.com&amp;quot;)
# change theme color
cc$color(&amp;quot;#008000&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can print out the payload that will be sending to given webhook using
&lt;code&gt;print&lt;/code&gt; method&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# print out the payload for checking
cc$print()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Card: 
  hookurl: https://outlook.office.com/webhook/...
  payload:  {&amp;quot;text&amp;quot;:&amp;quot;This is text of main body.&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;This is message title&amp;quot;,&amp;quot;potentialAction&amp;quot;:[{&amp;quot;@context&amp;quot;:&amp;quot;http://schema.org&amp;quot;,&amp;quot;@type&amp;quot;:&amp;quot;ViewAction&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;Read more&amp;quot;,&amp;quot;target&amp;quot;:[&amp;quot;https://www.google.com&amp;quot;]}],&amp;quot;themeColor&amp;quot;:&amp;quot;#008000&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Our &lt;code&gt;JSON&lt;/code&gt; payload looks good, time to send it out :)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# send to Teams
cc$send()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[1] TRUE
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;send&lt;/code&gt; menthod will return &lt;code&gt;TRUE&lt;/code&gt; if send was successful (status code
200). If it failed, it will return the reponse object for further
investigation. Our message with a link button will looks like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;media/main1.PNG&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;You probablity noticed now that this package is built using &lt;code&gt;R6&lt;/code&gt;
class(very nice tutorial by Hadley
&lt;a href=&#34;https://adv-r.hadley.nz/r6.html&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;). I decide to do this way
because by using OOP concept, it will give use a feeling that you are
“building” your message by adding something piece by piece. At the same
time the code will be highly readable and easy to understand. &lt;code&gt;teamr&lt;/code&gt;
has 3 main classes as of today — &lt;code&gt;connector_card&lt;/code&gt;, &lt;code&gt;card_section&lt;/code&gt; and
&lt;code&gt;action_card&lt;/code&gt;. For example, let’s add a section to our message:&lt;/p&gt;

&lt;h2 id=&#34;message-with-sections&#34;&gt;Message with sections&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;#initiate new card section object
sec &amp;lt;- card_section$new()

sec$text(sec_text = &amp;quot;2018-19 Finals MVP&amp;quot;)
sec$add_fact(fname = &amp;quot;Position&amp;quot;, fvalue = &amp;quot;Forward&amp;quot;)
sec$title(sec_title = &amp;quot;Player Info&amp;quot;)
sec$activity_image(sec_activitiy_image = &amp;quot;https://d2cwpp38twqe55.cloudfront.net/req/201905091/images/players/leonaka01.jpg&amp;quot;)
sec$activity_title(sec_activity_title = &amp;quot;Kawhi Leonard&amp;quot;)
sec$activity_sub_title(sec_activitiy_subtitle = &amp;quot;LA Clippers&amp;quot;)
sec$activity_text(sec_activitiy_text = &amp;quot;Activity text&amp;quot;)
cc$add_section(new_section = sec)
cc$send()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[1] TRUE
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is what you will get on your Teams channel:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;media/kawhi1.PNG&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;message-with-action-cards&#34;&gt;Message with action cards&lt;/h2&gt;

&lt;p&gt;Teams also support sending actionable messages. You can add a button to
your message which can send HTTP reqeust to a certain URL with different
type of inputs.&lt;/p&gt;

&lt;p&gt;In the following example, I will add a multilined text input, a date
selector and a multiple choice input to our message. Simply changing
&lt;code&gt;target = &amp;quot;http://...&amp;quot;&lt;/code&gt; in &lt;code&gt;add_actions&lt;/code&gt; method to the URL you want the
reponse payload to be sent to:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# create new action card
pa &amp;lt;- action_card$new(type = &amp;quot;ActionCard&amp;quot;, name = &amp;quot;Add comment&amp;quot;)
# add default actions to card
pa$add_actions(type = &amp;quot;HttpPOST&amp;quot;, name = &amp;quot;Save&amp;quot;, target = &amp;quot;http://...&amp;quot;)
# add text inputs
pa$add_text_inputs(id = &amp;quot;comment&amp;quot;, title = &amp;quot;Add comment for this task&amp;quot;, is_multi_line = TRUE)
# save to the card object
cc$add_potential_action(pa)

pa2 &amp;lt;- action_card$new(type = &amp;quot;ActionCard&amp;quot;, name = &amp;quot;Add Date&amp;quot;)
pa2$add_actions(type = &amp;quot;HttpPOST&amp;quot;, name = &amp;quot;Save&amp;quot;, target = &amp;quot;http://...&amp;quot;)
pa2$add_date_inputs(id = &amp;quot;date&amp;quot;, title = &amp;quot;Add Date for this task&amp;quot;)
cc$add_potential_action(pa2)

pa3 &amp;lt;- action_card$new(type = &amp;quot;ActionCard&amp;quot;, name = &amp;quot;Add Options&amp;quot;)
pa3$add_actions(type = &amp;quot;HttpPOST&amp;quot;, name = &amp;quot;Save&amp;quot;, target = &amp;quot;http://...&amp;quot;)
# add multiple choices. note that choices must be a nested named list
pa3$add_mchoice_inputs(id = &amp;quot;mchoice&amp;quot;, 
                       title = &amp;quot;Choice one&amp;quot;, 
                       is_multi_select = TRUE, 
                       choices = list(
                         list(display=&amp;quot;In Progress&amp;quot;, value=1),
                         list(display=&amp;quot;Active&amp;quot;, value=2),
                         list(display=&amp;quot;Close&amp;quot;, value=3))
                       )
cc$add_potential_action(pa3)

cc$send()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[1] TRUE
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;media/teamr.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;If you want to learn more regarding Microsoft Connectors, you check out
the offical doc
&lt;a href=&#34;https://docs.microsoft.com/en-us/microsoftteams/platform/concepts/connectors/connectors-using&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;

&lt;p&gt;This is my very first package on CRAN so if you found any bugs please
report here &lt;a href=&#34;https://github.com/wwwjk366/teamr/issues&#34; target=&#34;_blank&#34;&gt;https://github.com/wwwjk366/teamr/issues&lt;/a&gt;. I do have plan
to add more functionality to the package so stay tuned!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Add Sunburst Chart to highcharter Package</title>
      <link>/post/2019-06-13-add-sunburst/add-sunburst-chart-to-highcharter-package/</link>
      <pubDate>Thu, 13 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/2019-06-13-add-sunburst/add-sunburst-chart-to-highcharter-package/</guid>
      <description>
&lt;script src=&#34;../../rmarkdown-libs/htmlwidgets/htmlwidgets.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;../../rmarkdown-libs/pymjs/pym.v1.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;../../rmarkdown-libs/widgetframe-binding/widgetframe.js&#34;&gt;&lt;/script&gt;


&lt;div id=&#34;the-highcharter-package&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;The &lt;code&gt;highcharter&lt;/code&gt; Package&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;highcharter&lt;/code&gt; package &lt;a href=&#34;http://jkunst.com/highcharter/&#34;&gt;link&lt;/a&gt; by Joshua Kunst has long been my favorite data visualization package in R. It created a wonderful API to the famous JS &lt;code&gt;Highcharts&lt;/code&gt; library. &lt;a href=&#34;https://www.highcharts.com/&#34;&gt;link&lt;/a&gt;. Although &lt;code&gt;Highcharts&lt;/code&gt; is not free for commercial use, but I found many functionality of it is unparalleled with other visualization packages like &lt;code&gt;ploty&lt;/code&gt; or &lt;code&gt;sunburstR&lt;/code&gt; or &lt;code&gt;r2d3&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For example, you can easily create an interactive scatterplot with &lt;code&gt;ggplot2&lt;/code&gt; like syntax:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;data(diamonds, economics_long, mpg, package = &amp;quot;ggplot2&amp;quot;)
library(tidyverse)
library(highcharter)
library(widgetframe)

l &amp;lt;- hchart(mpg, &amp;quot;scatter&amp;quot;, hcaes(x = displ, y = hwy, group = class))
frameWidget(l, height = &amp;#39;400&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;htmlwidget-1&#34; style=&#34;width:100%;height:400px;&#34; class=&#34;widgetframe html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-1&#34;&gt;{&#34;x&#34;:{&#34;url&#34;:&#34;/post/2019-06-13-add-sunburst/index_files/figure-html//widgets/widget_unnamed-chunk-1.html&#34;,&#34;options&#34;:{&#34;xdomain&#34;:&#34;*&#34;,&#34;allowfullscreen&#34;:false,&#34;lazyload&#34;:false}},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;p&gt;Or to be more flexible, use the API functions to “build” the chart and fine tuning almost any specs of your charts:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;hc &amp;lt;- highchart() %&amp;gt;% 
  hc_xAxis(categories = citytemp$month) %&amp;gt;% 
  hc_add_series(name = &amp;quot;Tokyo&amp;quot;, data = citytemp$tokyo) %&amp;gt;% 
  hc_add_series(name = &amp;quot;New York&amp;quot;, data = citytemp$new_york) %&amp;gt;% 
  hc_title(text = &amp;quot;This is a title with &amp;lt;i&amp;gt;margin&amp;lt;/i&amp;gt; and &amp;lt;b&amp;gt;Strong or bold text&amp;lt;/b&amp;gt;&amp;quot;,
           margin = 20, align = &amp;quot;left&amp;quot;,
           style = list(color = &amp;quot;#90ed7d&amp;quot;, useHTML = TRUE)) %&amp;gt;% 
  hc_subtitle(text = &amp;quot;And this is a subtitle with more information&amp;quot;,
              align = &amp;quot;left&amp;quot;,
              style = list(color = &amp;quot;#2b908f&amp;quot;, fontWeight = &amp;quot;bold&amp;quot;)) %&amp;gt;% 
  hc_credits(enabled = TRUE, # add credits
             text = &amp;quot;www.link.tomy.site&amp;quot;,
             href = &amp;quot;http://jkunst.com&amp;quot;) %&amp;gt;% 
  hc_legend(align = &amp;quot;left&amp;quot;, verticalAlign = &amp;quot;top&amp;quot;,
            layout = &amp;quot;vertical&amp;quot;, x = 0, y = 100) %&amp;gt;%
  hc_tooltip(crosshairs = TRUE, backgroundColor = &amp;quot;#FCFFC5&amp;quot;,
             shared = TRUE, borderWidth = 5) %&amp;gt;% 
  hc_exporting(enabled = TRUE)

frameWidget(hc, height = &amp;#39;600&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;htmlwidget-2&#34; style=&#34;width:100%;height:600px;&#34; class=&#34;widgetframe html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-2&#34;&gt;{&#34;x&#34;:{&#34;url&#34;:&#34;/post/2019-06-13-add-sunburst/index_files/figure-html//widgets/widget_unnamed-chunk-2.html&#34;,&#34;options&#34;:{&#34;xdomain&#34;:&#34;*&#34;,&#34;allowfullscreen&#34;:false,&#34;lazyload&#34;:false}},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;p&gt;Here. A light weighted, interactive chart with exporting ability and customized tooltip with less than 20 lines of code.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;sunburst-chart&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Sunburst Chart&lt;/h2&gt;
&lt;p&gt;Let’s take a look at an example of sunburst chart by official Highcharts.org (created in jsfiddle, added to this RMD document using iframe):&lt;/p&gt;
&lt;iframe width=&#34;100%&#34; height=&#34;800px&#34; src=&#34;https://jsfiddle.net/wwwjk366/pa72o0Ln/embedded/result,html,js,css&#34; allowfullscreen=&#34;allowfullscreen&#34; frameborder=&#34;0&#34;&gt;
&lt;/iframe&gt;
&lt;p&gt;Sunburst chart shows hierarchy through a series of rings, that are sliced for each category node. Each ring corresponds to a level in the hierarchy, with the central circle representing the root node and the hierarchy moving outwards from it.&lt;/p&gt;
&lt;p&gt;Rings are sliced up and divided based on their hierarchical relationship to the parent slice. The angle of each slice is either divided equally under its parent node or can be made proportional to a value.&lt;/p&gt;
&lt;p&gt;Color can be used to highlight hierarchical groupings or specific categories.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;add-wrapper-to-existing-highcharter&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Add Wrapper to Existing &lt;code&gt;highcharter&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;This is very straightforward since the &lt;code&gt;hc_add_series()&lt;/code&gt; function provides an robust interface to Highcharts series API &lt;a href=&#34;https://api.highcharts.com/highcharts/series&#34;&gt;link&lt;/a&gt;. Moreover, the data structure required of sunburst chart is actually same as treemap chart.&lt;/p&gt;
&lt;p&gt;Assume we have a dataframe with 3 levels(index1, index2 and index3), each observation is also associated with an numeric value:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tibble)
data &amp;lt;- tibble(
  index0 = &amp;quot;Letter&amp;quot;,
  index1 = sample(LETTERS[1:5], 500, replace = T),
  index2 = sample(LETTERS[6:10], 500, replace = T),
  index3 = sample(LETTERS[11:15], 500, replace = T),
  value = rpois(500, 5)  
)

head(data)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# A tibble: 6 x 5
  index0 index1 index2 index3 value
  &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt;  &amp;lt;int&amp;gt;
1 Letter D      F      N          1
2 Letter B      J      M          5
3 Letter A      J      O          4
4 Letter D      J      N          8
5 Letter B      J      M          3
6 Letter D      G      M          8&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and remember we need to parse the data into the format that Highcharts can recognized, which is a nested list:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;
var data = [{
    id: &amp;#39;0.0&amp;#39;,
    parent: &amp;#39;&amp;#39;,
    name: &amp;#39;The World&amp;#39;
}, {
    id: &amp;#39;1.3&amp;#39;,
    parent: &amp;#39;0.0&amp;#39;,
    name: &amp;#39;Asia&amp;#39;
}, {
    id: &amp;#39;1.1&amp;#39;,
    parent: &amp;#39;0.0&amp;#39;,
    name: &amp;#39;Africa&amp;#39;
}, {
    id: &amp;#39;1.2&amp;#39;,
    parent: &amp;#39;0.0&amp;#39;
},
...
}
    &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that every item in the list must have an “id” and “parent”.&lt;/p&gt;
&lt;p&gt;In &lt;code&gt;hctreemap2()&lt;/code&gt; function, author parsed the dataframe into list nicely using &lt;code&gt;purrr&lt;/code&gt; and &lt;code&gt;rlang&lt;/code&gt; package from tidyverse. Do not worry if you don’t understand those “Quasiquotations” &lt;a href=&#34;https://github.com/r-lib/rlang&#34;&gt;link&lt;/a&gt;. It is just syntax sugar using non-standard evaluation. &lt;a href=&#34;https://tidyeval.tidyverse.org/&#34;&gt;more reference&lt;/a&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;group_vars &amp;lt;- c(&amp;quot;index0&amp;quot;,&amp;quot;index1&amp;quot;, &amp;quot;index2&amp;quot;, &amp;quot;index3&amp;quot;)
size_var &amp;lt;- &amp;quot;value&amp;quot;
group_syms &amp;lt;- rlang::syms(group_vars)
size_sym &amp;lt;- rlang::sym(size_var)
  
  if (data %&amp;gt;%
      select(!!!group_syms) %&amp;gt;%
      map(unique) %&amp;gt;%
      unlist() %&amp;gt;%
      anyDuplicated()) stop(&amp;quot;Sunburst data uses same label at multiple levels.&amp;quot;)
  
  data &amp;lt;- data %&amp;gt;% mutate_at(group_vars, as.character)
  
  name_cell &amp;lt;- function(..., depth) paste0(list(...), 1:depth, collapse = &amp;quot;&amp;quot;)
  
  data_at_depth &amp;lt;- function(depth) {
    data %&amp;gt;%
      group_by(!!!group_syms[1:depth]) %&amp;gt;%
      summarise(
        value = sum(!!size_sym)
      ) %&amp;gt;%
      ungroup() %&amp;gt;%
      mutate(
        name = !!group_syms[[depth]],
        level = depth
      ) %&amp;gt;% 
      mutate_at(group_vars, as.character()) %&amp;gt;% 
      {
        if (depth == 1) mutate(., id = paste0(name, 1))
        else {
          mutate(
            .,
            parent = pmap_chr(
              list(!!!group_syms[1:depth - 1]),
              name_cell,
              depth = depth - 1),
            id = paste0(parent, name, depth)
          )
        }
      }
  }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lets look at the dataframe before we parse it to a list:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;sunburst_df &amp;lt;- 1:length(group_vars) %&amp;gt;%
  map(data_at_depth) %&amp;gt;%
  bind_rows() %&amp;gt;% 
  arrange(level)

head(sunburst_df)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# A tibble: 6 x 9
  index0 value name   level id        index1 parent  index2 index3
  &amp;lt;chr&amp;gt;  &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;  &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt; 
1 Letter  2496 Letter     1 Letter1   &amp;lt;NA&amp;gt;   &amp;lt;NA&amp;gt;    &amp;lt;NA&amp;gt;   &amp;lt;NA&amp;gt;  
2 Letter   440 A          2 Letter1A2 A      Letter1 &amp;lt;NA&amp;gt;   &amp;lt;NA&amp;gt;  
3 Letter   575 B          2 Letter1B2 B      Letter1 &amp;lt;NA&amp;gt;   &amp;lt;NA&amp;gt;  
4 Letter   549 C          2 Letter1C2 C      Letter1 &amp;lt;NA&amp;gt;   &amp;lt;NA&amp;gt;  
5 Letter   477 D          2 Letter1D2 D      Letter1 &amp;lt;NA&amp;gt;   &amp;lt;NA&amp;gt;  
6 Letter   455 E          2 Letter1E2 E      Letter1 &amp;lt;NA&amp;gt;   &amp;lt;NA&amp;gt;  &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s take a look at the first couple of items:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;data_list &amp;lt;- sunburst_df %&amp;gt;%
  highcharter::list_parse() %&amp;gt;%
  purrr::map(~.[!is.na(.)])


data_list[1:3]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[[1]]
[[1]]$index0
[1] &amp;quot;Letter&amp;quot;

[[1]]$value
[1] 2496

[[1]]$name
[1] &amp;quot;Letter&amp;quot;

[[1]]$level
[1] 1

[[1]]$id
[1] &amp;quot;Letter1&amp;quot;


[[2]]
[[2]]$index0
[1] &amp;quot;Letter&amp;quot;

[[2]]$value
[1] 440

[[2]]$name
[1] &amp;quot;A&amp;quot;

[[2]]$level
[1] 2

[[2]]$id
[1] &amp;quot;Letter1A2&amp;quot;

[[2]]$index1
[1] &amp;quot;A&amp;quot;

[[2]]$parent
[1] &amp;quot;Letter1&amp;quot;


[[3]]
[[3]]$index0
[1] &amp;quot;Letter&amp;quot;

[[3]]$value
[1] 575

[[3]]$name
[1] &amp;quot;B&amp;quot;

[[3]]$level
[1] 2

[[3]]$id
[1] &amp;quot;Letter1B2&amp;quot;

[[3]]$index1
[1] &amp;quot;B&amp;quot;

[[3]]$parent
[1] &amp;quot;Letter1&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Alright, the data has been parsed into the corresponding format. Now we just need to pass this in to &lt;code&gt;highcharter::hc_add_series()&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;hc &amp;lt;- highchart() %&amp;gt;%
  hc_add_series(data = data_list,
                type = &amp;quot;sunburst&amp;quot;,
                allowDrillToNode = TRUE)

frameWidget(hc, height = &amp;#39;600&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;htmlwidget-3&#34; style=&#34;width:100%;height:600px;&#34; class=&#34;widgetframe html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-3&#34;&gt;{&#34;x&#34;:{&#34;url&#34;:&#34;/post/2019-06-13-add-sunburst/index_files/figure-html//widgets/widget_unnamed-chunk-7.html&#34;,&#34;options&#34;:{&#34;xdomain&#34;:&#34;*&#34;,&#34;allowfullscreen&#34;:false,&#34;lazyload&#34;:false}},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;p&gt;Here we go!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://media.giphy.com/media/rVbAzUUSUC6dO/giphy.gif&#34; /&gt;&lt;/p&gt;
&lt;p&gt;We are able to create the sunburst chart using Highcharts API! &lt;a href=&#34;https://github.com/wwwjk366/highcharter/blob/0a3c53a7ec5547af4998bc0b893f5c44df3469d8/R/hchart-shorcuts.R#L449-L554&#34;&gt;link to full code&lt;/a&gt; Of course it’s a bit ugly now because we didn’t pass any other parameters to the chart.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;more-configurations&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;More Configurations&lt;/h2&gt;
&lt;p&gt;Putting everything together,let’s make the center spot transparent by adding &lt;code&gt;color = &#39;transparent&#39;&lt;/code&gt; arguments and change the sub level coloring by &lt;code&gt;colorVariation = list(key = &#39;brightness&#39;, to = 0.5)&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)
library(highcharter)
library(RColorBrewer)

hc &amp;lt;- tibble(
 index0 = &amp;quot;Letter&amp;quot;,
 index1 = sample(LETTERS[1:5], 500, replace = T),
 index2 = sample(LETTERS[6:10], 500, replace = T),
 index3 = sample(LETTERS[11:15], 500, replace = T),
 value = rpois(500, 5)  
) %&amp;gt;%
 hcsunburst(
   group_vars = c(&amp;quot;index0&amp;quot;,&amp;quot;index1&amp;quot;, &amp;quot;index2&amp;quot;, &amp;quot;index3&amp;quot;),
   size_var = &amp;quot;value&amp;quot;,
   levels = list(
     list(level = 1, color = &amp;#39;transparent&amp;#39;, dataLabels = list(enabled = TRUE)),
     list(level = 2, colorByPoint = TRUE, dataLabels = list(enabled = TRUE)),
     list(level = 3, colorVariation = list(key = &amp;#39;brightness&amp;#39;, to = 0.5),
          dataLabels = list(enabled = TRUE)),
     list(level = 4, colorVariation = list(key = &amp;#39;brightness&amp;#39;, to = -0.5),
          dataLabels = list(enabled = FALSE))
   )
 ) %&amp;gt;% 
 hc_tooltip(pointFormat = &amp;quot;&amp;lt;b&amp;gt;{point.name}&amp;lt;/b&amp;gt;:&amp;lt;br&amp;gt;
            Value: {point.value:,.0f}&amp;lt;br&amp;gt;&amp;quot;)

frameWidget(hc, height = &amp;#39;600&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;htmlwidget-4&#34; style=&#34;width:100%;height:600px;&#34; class=&#34;widgetframe html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-4&#34;&gt;{&#34;x&#34;:{&#34;url&#34;:&#34;/post/2019-06-13-add-sunburst/index_files/figure-html//widgets/widget_cars.html&#34;,&#34;options&#34;:{&#34;xdomain&#34;:&#34;*&#34;,&#34;allowfullscreen&#34;:false,&#34;lazyload&#34;:false}},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;p&gt;&lt;img src=&#34;https://media.giphy.com/media/J1S363SbQFselYWz68/source.gif&#34; /&gt;&lt;/p&gt;
&lt;p&gt;TL;DR — You can start using this function by installing the forked version on my GitHub: &lt;code&gt;devtools::install_github(repo = &amp;quot;wwwjk366/highcharter&amp;quot;)&lt;/code&gt;. I have already initiated a pull request and hopefully the maintainer of `highcharter’ can add this function soon.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
