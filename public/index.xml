<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Think.Data.Science</title>
    <link>/</link>
    <description>Recent content on Think.Data.Science</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator>
    <language>en-us</language>
    <copyright>{year}</copyright>
    <lastBuildDate>Sat, 01 Jun 2030 13:00:00 +0000</lastBuildDate>
    
	    <atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Example Page 1</title>
      <link>/courses/example/example1/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      
      <guid>/courses/example/example1/</guid>
      <description>&lt;p&gt;Coming Soon&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Example Page 2</title>
      <link>/courses/example/example2/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      
      <guid>/courses/example/example2/</guid>
      <description>&lt;p&gt;WIP&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Example Talk</title>
      <link>/talk/example/</link>
      <pubDate>Sat, 01 Jun 2030 13:00:00 +0000</pubDate>
      
      <guid>/talk/example/</guid>
      <description>&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Click on the &lt;strong&gt;Slides&lt;/strong&gt; button above to view the built-in slides feature.
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Slides can be added in a few ways:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Create&lt;/strong&gt; slides using Academic&amp;rsquo;s &lt;a href=&#34;https://sourcethemes.com/academic/docs/managing-content/#create-slides&#34; target=&#34;_blank&#34;&gt;&lt;em&gt;Slides&lt;/em&gt;&lt;/a&gt; feature and link using &lt;code&gt;slides&lt;/code&gt; parameter in the front matter of the talk file&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Upload&lt;/strong&gt; an existing slide deck to &lt;code&gt;static/&lt;/code&gt; and link using &lt;code&gt;url_slides&lt;/code&gt; parameter in the front matter of the talk file&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Embed&lt;/strong&gt; your slides (e.g. Google Slides) or presentation video on this page using &lt;a href=&#34;https://sourcethemes.com/academic/docs/writing-markdown-latex/&#34; target=&#34;_blank&#34;&gt;shortcodes&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Further talk details can easily be added to this page using &lt;em&gt;Markdown&lt;/em&gt; and $\rm \LaTeX$ math code.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Introducing Python package --- gower</title>
      <link>/post/2019-12-16-introducing-python-package-gower/introducing-python-package-gower/</link>
      <pubDate>Mon, 16 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/2019-12-16-introducing-python-package-gower/introducing-python-package-gower/</guid>
      <description>

&lt;p&gt;Today I am so pleased to introduce my first PyPI package (so much easier to submit comparing to CRAN) &amp;mdash; &lt;a href=&#34;https://pypi.org/project/gower/&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;gower&lt;/code&gt;&lt;/a&gt; for calculating gower distance. I borrowed ideas from &lt;a href=&#34;https://github.com/scikit-learn/scikit-learn/issues/5884&#34; target=&#34;_blank&#34;&gt;https://github.com/scikit-learn/scikit-learn/issues/5884&lt;/a&gt; nad hopefully it can be added to &lt;code&gt;sklearn&lt;/code&gt; soon. There are lots of packages in R that incorporated this method but unfortunately not for Python users. I took this chance to try the whole package-making experience for PyPI and here we go!&lt;/p&gt;

&lt;h2 id=&#34;what-is-gower-distance&#34;&gt;What is gower distance?&lt;/h2&gt;

&lt;p&gt;Like normal Euclidean distance or cosine distance, Gower distance is a distance measure. However, it can be used to calculate distance between two entity whose attribute has a mixed of categorical and numerical values. Why this is important? Many common clustering algorithms, e.g. K-means clustering - only works when all variables are numeric. &lt;a href=&#34;https://www.jstor.org/stable/2528823?seq=1&#34; target=&#34;_blank&#34;&gt;Gower (1971) A general coefficient of similarity and some of its properties. Biometrics 27 857–874.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I won&amp;rsquo;t talk about the math behind it here but if you are interested there are tons of good material out there besides of Gower&amp;rsquo;s original paper:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://rstudio-pubs-static.s3.amazonaws.com/423873_adfdb38bce8d47579f6dc916dd67ae75.html#fnref2&#34; target=&#34;_blank&#34;&gt;https://rstudio-pubs-static.s3.amazonaws.com/423873_adfdb38bce8d47579f6dc916dd67ae75.html#fnref2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://towardsdatascience.com/clustering-on-mixed-type-data-8bbd0a2569c3&#34; target=&#34;_blank&#34;&gt;https://towardsdatascience.com/clustering-on-mixed-type-data-8bbd0a2569c3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.math.vu.nl/~sbhulai/papers/thesis-vandenhoven.pdf&#34; target=&#34;_blank&#34;&gt;https://www.math.vu.nl/~sbhulai/papers/thesis-vandenhoven.pdf&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;installation&#34;&gt;Installation&lt;/h2&gt;

&lt;p&gt;You can install directly from PyPI using &lt;code&gt;pip&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;pip install gower&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;calculate-gower-distance&#34;&gt;Calculate Gower Distance&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import numpy as np
import pandas as pd

Xd=pd.DataFrame({&#39;age&#39;:[21,21,19, 30,21,21,19,30],
&#39;gender&#39;:[&#39;M&#39;,&#39;M&#39;,&#39;M&#39;,&#39;M&#39;,&#39;F&#39;,&#39;F&#39;,&#39;F&#39;,&#39;F&#39;],
&#39;civil_status&#39;:[&#39;MARRIED&#39;,&#39;SINGLE&#39;,&#39;SINGLE&#39;,&#39;SINGLE&#39;,&#39;MARRIED&#39;,&#39;SINGLE&#39;,&#39;WIDOW&#39;,&#39;DIVORCED&#39;],
&#39;salary&#39;:[3000.0,1200.0 ,32000.0,1800.0 ,2900.0 ,1100.0 ,10000.0,1500.0],
&#39;has_children&#39;:[1,0,1,1,1,0,0,1],
&#39;available_credit&#39;:[2200,100,22000,1100,2000,100,6000,2200]})
Yd = Xd.iloc[0:1,:]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;First create some fake data called &lt;code&gt;Xd&lt;/code&gt; and &lt;code&gt;Yd&lt;/code&gt; as pandas dataframe:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;Xd
&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;age&lt;/th&gt;
      &lt;th&gt;gender&lt;/th&gt;
      &lt;th&gt;civil_status&lt;/th&gt;
      &lt;th&gt;salary&lt;/th&gt;
      &lt;th&gt;has_children&lt;/th&gt;
      &lt;th&gt;available_credit&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;21&lt;/td&gt;
      &lt;td&gt;M&lt;/td&gt;
      &lt;td&gt;MARRIED&lt;/td&gt;
      &lt;td&gt;3000.0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2200&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;21&lt;/td&gt;
      &lt;td&gt;M&lt;/td&gt;
      &lt;td&gt;SINGLE&lt;/td&gt;
      &lt;td&gt;1200.0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;100&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;19&lt;/td&gt;
      &lt;td&gt;M&lt;/td&gt;
      &lt;td&gt;SINGLE&lt;/td&gt;
      &lt;td&gt;32000.0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;22000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;30&lt;/td&gt;
      &lt;td&gt;M&lt;/td&gt;
      &lt;td&gt;SINGLE&lt;/td&gt;
      &lt;td&gt;1800.0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1100&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;21&lt;/td&gt;
      &lt;td&gt;F&lt;/td&gt;
      &lt;td&gt;MARRIED&lt;/td&gt;
      &lt;td&gt;2900.0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;5&lt;/th&gt;
      &lt;td&gt;21&lt;/td&gt;
      &lt;td&gt;F&lt;/td&gt;
      &lt;td&gt;SINGLE&lt;/td&gt;
      &lt;td&gt;1100.0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;100&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;6&lt;/th&gt;
      &lt;td&gt;19&lt;/td&gt;
      &lt;td&gt;F&lt;/td&gt;
      &lt;td&gt;WIDOW&lt;/td&gt;
      &lt;td&gt;10000.0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;6000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;7&lt;/th&gt;
      &lt;td&gt;30&lt;/td&gt;
      &lt;td&gt;F&lt;/td&gt;
      &lt;td&gt;DIVORCED&lt;/td&gt;
      &lt;td&gt;1500.0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2200&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;Yd
&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;age&lt;/th&gt;
      &lt;th&gt;gender&lt;/th&gt;
      &lt;th&gt;civil_status&lt;/th&gt;
      &lt;th&gt;salary&lt;/th&gt;
      &lt;th&gt;has_children&lt;/th&gt;
      &lt;th&gt;available_credit&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;21&lt;/td&gt;
      &lt;td&gt;M&lt;/td&gt;
      &lt;td&gt;MARRIED&lt;/td&gt;
      &lt;td&gt;3000.0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2200&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;h3 id=&#34;compute-distance-matrix&#34;&gt;Compute distance matrix&lt;/h3&gt;

&lt;p&gt;Main function for the package is &lt;code&gt;gower.gower_matrix()&lt;/code&gt;. This function has 4 arguments:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;data_x&lt;/code&gt; : input data&lt;/li&gt;
&lt;li&gt;&lt;code&gt;data_y&lt;/code&gt; : default &lt;code&gt;None&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;weight&lt;/code&gt; : weight of each variable, default to be a vector of 1&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cat_features&lt;/code&gt; : a boolean vector indicates categorical features, default &lt;code&gt;None&lt;/code&gt; and function will determine by itself&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let&amp;rsquo;s run it on our dataframe &lt;code&gt;Xd&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import gower

gower.gower_matrix(Xd)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[0.        , 0.3590238 , 0.5040732 , 0.31787416, 0.16872811,
        0.52622986, 0.59697855, 0.47778758],
       [0.3590238 , 0.        , 0.52976364, 0.3138769 , 0.523629  ,
        0.16720603, 0.45600235, 0.6539635 ],
       [0.5040732 , 0.52976364, 0.        , 0.48861402, 0.6728013 ,
        0.6969697 , 0.740428  , 0.8151941 ],
       [0.31787416, 0.3138769 , 0.48861402, 0.        , 0.4824794 ,
        0.48108295, 0.74818605, 0.34332284],
       [0.16872811, 0.523629  , 0.6728013 , 0.4824794 , 0.        ,
        0.35750175, 0.43237334, 0.3121036 ],
       [0.52622986, 0.16720603, 0.6969697 , 0.48108295, 0.35750175,
        0.        , 0.2898751 , 0.4878362 ],
       [0.59697855, 0.45600235, 0.740428  , 0.74818605, 0.43237334,
        0.2898751 , 0.        , 0.57476616],
       [0.47778758, 0.6539635 , 0.8151941 , 0.34332284, 0.3121036 ,
        0.4878362 , 0.57476616, 0.        ]], dtype=float32)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s try to treat them all as categorical features:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;gower.gower_matrix(Xd, cat_features = [True, True,True,True,True,True])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[0.        , 0.6666667 , 0.6666667 , 0.6666667 , 0.5       ,
        0.8333333 , 1.        , 0.6666667 ],
       [0.6666667 , 0.        , 0.6666667 , 0.6666667 , 0.8333333 ,
        0.33333334, 0.8333333 , 1.        ],
       [0.6666667 , 0.6666667 , 0.        , 0.5       , 0.8333333 ,
        0.8333333 , 0.8333333 , 0.8333333 ],
       [0.6666667 , 0.6666667 , 0.5       , 0.        , 0.8333333 ,
        0.8333333 , 1.        , 0.6666667 ],
       [0.5       , 0.8333333 , 0.8333333 , 0.8333333 , 0.        ,
        0.6666667 , 0.8333333 , 0.6666667 ],
       [0.8333333 , 0.33333334, 0.8333333 , 0.8333333 , 0.6666667 ,
        0.        , 0.6666667 , 0.8333333 ],
       [1.        , 0.8333333 , 0.8333333 , 1.        , 0.8333333 ,
        0.6666667 , 0.        , 0.8333333 ],
       [0.6666667 , 1.        , 0.8333333 , 0.6666667 , 0.6666667 ,
        0.8333333 , 0.8333333 , 0.        ]], dtype=float32)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It also supports array inputs:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;X = np.asarray(Xd)
gower.gower_matrix(X)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[0.        , 0.3590238 , 0.5040732 , 0.31787416, 0.16872811,
        0.52622986, 0.59697855, 0.47778758],
       [0.3590238 , 0.        , 0.52976364, 0.3138769 , 0.523629  ,
        0.16720603, 0.45600235, 0.6539635 ],
       [0.5040732 , 0.52976364, 0.        , 0.48861402, 0.6728013 ,
        0.6969697 , 0.740428  , 0.8151941 ],
       [0.31787416, 0.3138769 , 0.48861402, 0.        , 0.4824794 ,
        0.48108295, 0.74818605, 0.34332284],
       [0.16872811, 0.523629  , 0.6728013 , 0.4824794 , 0.        ,
        0.35750175, 0.43237334, 0.3121036 ],
       [0.52622986, 0.16720603, 0.6969697 , 0.48108295, 0.35750175,
        0.        , 0.2898751 , 0.4878362 ],
       [0.59697855, 0.45600235, 0.740428  , 0.74818605, 0.43237334,
        0.2898751 , 0.        , 0.57476616],
       [0.47778758, 0.6539635 , 0.8151941 , 0.34332284, 0.3121036 ,
        0.4878362 , 0.57476616, 0.        ]], dtype=float32)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;find-top-n-similar-items&#34;&gt;Find top n similar items&lt;/h3&gt;

&lt;p&gt;One intuition for me to create this package is to use it at work. I usually need to find look-alike customer for my company. E.g. one customer with certain KPI and properties &amp;mdash; location, tenure, RFM metrics etc and they are often mixed type. Gower distance can easily be calculated the distance between them and allows me to give certain variables higher/lower weight.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;gower.gower_topn(Xd.iloc[0:1,:], Xd, n = 5)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;{&#39;index&#39;: array([0, 4, 3, 1, 7]),
 &#39;values&#39;: array([0.        , 0.16872811, 0.31787416, 0.3590238 , 0.47778758],
       dtype=float32)}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The function will return two arrays. The index of the top 5 closest records and their distance in decimals&lt;/p&gt;

&lt;h2 id=&#34;application-in-hierarchical-clustering&#34;&gt;Application in Hierarchical Clustering&lt;/h2&gt;

&lt;p&gt;The most popular use cases for mathematical distances are clustering. &lt;code&gt;cluster&lt;/code&gt; module in &lt;code&gt;scipy&lt;/code&gt; provided the ability to use custom distance matrix to do hierarchical clustering. Let&amp;rsquo;s run a simple clustering model on our toy data. First we need to create the linkage using our precomputed distance matrix:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import numpy as np
import matplotlib.pyplot as plt
from scipy.cluster.hierarchy import linkage, fcluster, dendrogram

dm = gower.gower_matrix(X)
Zd = linkage(dm) 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;/opt/conda/lib/python3.7/site-packages/ipykernel_launcher.py:6: ClusterWarning: scipy.cluster: The symmetric non-negative hollow observation matrix looks suspiciously like an uncondensed distance matrix
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Say we want total of 3 clusters:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;cld = fcluster(Zd, 3, criterion=&#39;maxclust&#39;)
cld
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([2, 1, 3, 2, 2, 1, 1, 2], dtype=int32)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can also inspect the dendrogram created from our distance matrix:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dendrogram(Zd) 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;gower_introduction_28_1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This package will be maintained so please feel free to report bug and issues here: (&lt;a href=&#34;https://github.com/wwwjk366/teamr/issues&#34; target=&#34;_blank&#34;&gt;https://github.com/wwwjk366/teamr/issues&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Last but not least:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://media.giphy.com/media/26FLhjMK5PytcY2rK/giphy.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Authenticating AWS (Signature V4) in R using Python Backend</title>
      <link>/post/2019-12-05-authenticating-aws-signature-v4-in-r-using-python-backend/authenticating-aws-signature-v4-in-r-using-python-backend/</link>
      <pubDate>Thu, 05 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/2019-12-05-authenticating-aws-signature-v4-in-r-using-python-backend/authenticating-aws-signature-v4-in-r-using-python-backend/</guid>
      <description>


&lt;div id=&#34;intuition&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Intuition&lt;/h2&gt;
&lt;p&gt;I was working with an Elasticsearch project on AWS using Python and the &lt;code&gt;requests_aws4auth&lt;/code&gt; package worked like a charm for me. Never had any issue regarding the authentication (AWS V4 could be hard to work with sometimes). However, when I trying to create a Shiny app for my project, the problem emerged. I just couldn’t get the V4 auth to work with &lt;code&gt;httr&lt;/code&gt; in R. I tried &lt;code&gt;aws.signature&lt;/code&gt; package on &lt;a href=&#34;https://github.com/cloudyr/aws.signature&#34;&gt;Github&lt;/a&gt; but keep getting request header issues. Then I remembered that JJ Alaire from Rstudio created this amazing package &lt;code&gt;reticulate&lt;/code&gt; &lt;a href=&#34;https://rstudio.github.io/reticulate/&#34;&gt;(link)&lt;/a&gt; claiming the ability to import Python packages into R. Therefore I am intrigued to give it a try!&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;the-syntax&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;The Syntax&lt;/h2&gt;
&lt;p&gt;After install this package, the actually syntax is quite simple.&lt;/p&gt;
&lt;p&gt;Load the package and point it to the location of your Python (I’m using Ubuntu here):&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(reticulate)
use_python(&amp;quot;/usr/local/bin/python&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then you can easily load and call Python functions! For example, a simple &lt;code&gt;listdir&lt;/code&gt; function from &lt;code&gt;os&lt;/code&gt; package:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;os &amp;lt;- import(&amp;quot;os&amp;quot;)
os$listdir(&amp;quot;.&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;index.html&amp;quot;   &amp;quot;featured.png&amp;quot; &amp;quot;index.Rmd&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;in-shiny&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;In Shiny&lt;/h2&gt;
&lt;p&gt;All I did was adding those to the &lt;code&gt;global.R&lt;/code&gt; script (the script I source first in &lt;code&gt;server.R&lt;/code&gt;)&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;py_awsauth &amp;lt;- import(&amp;quot;requests_aws4auth&amp;quot;)
py_requests &amp;lt;- import(&amp;quot;requests&amp;quot;)

region &amp;lt;- &amp;#39;us-east-2&amp;#39;
service &amp;lt;- &amp;#39;execute-api&amp;#39;
credentials &amp;lt;- aws.signature::locate_credentials()
authr &amp;lt;- py_awsauth$AWS4Auth(credentials$key, credentials$secret, region, service, session_token=credentials$session_token)
url &amp;lt;- &amp;#39;https://.....&amp;#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see I am setting up the AWS connection using my local stored credentials. And the next step is to send HTTP request using Python &lt;code&gt;requests&lt;/code&gt; package.&lt;/p&gt;
&lt;p&gt;One thing to noticed is that you cannot use nested list for your payload as you would do that if you are using R &lt;code&gt;httr&lt;/code&gt; package. You have to create a Python dictionary object as your payload using &lt;code&gt;reticulate::py_dict()&lt;/code&gt; function:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;
params &amp;lt;- reticulate::py_dict(c(&amp;quot;x&amp;quot;, &amp;quot;y&amp;quot;),
                              c(...,...))
response &amp;lt;- py_requests$get(url, auth = authr,params = params)
res &amp;lt;- response$json()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It worked like magic!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://media.giphy.com/media/14udF3WUwwGMaA/giphy.gif&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;thoughts&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Thoughts&lt;/h2&gt;
&lt;p&gt;This is a good example of why I always encouraging Data Scientist to learn both R and Python. Many people only proficient in one and often has biased opinion against the other. Why not learn both so you can use the amazing package in R like &lt;code&gt;shiny&lt;/code&gt; and equivalently amazing packages like &lt;code&gt;ortools&lt;/code&gt; (I will write another post on this) at the same time!&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>LICENSE: CC-BY-SA</title>
      <link>/license/</link>
      <pubDate>Thu, 05 Dec 2019 00:00:00 +0100</pubDate>
      
      <guid>/license/</guid>
      <description>&lt;p&gt;My &lt;a href=&#34;./post/&#34;&gt;blog posts&lt;/a&gt; are released under a &lt;a href=&#34;http://creativecommons.org/licenses/by-sa/4.0/&#34; target=&#34;_blank&#34;&gt;Creative Commons Attribution-ShareAlike 4.0 International License&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;i class=&#34;fab fa-creative-commons fa-2x&#34;&gt;&lt;/i&gt;&lt;i class=&#34;fab fa-creative-commons-by fa-2x&#34;&gt;&lt;/i&gt;&lt;i class=&#34;fab fa-creative-commons-sa fa-2x&#34;&gt;&lt;/i&gt;
&lt;/center&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Introducing teamr Package</title>
      <link>/post/2019-07-22-introducing-teamr/</link>
      <pubDate>Sun, 21 Jul 2019 20:14:43 +0000</pubDate>
      
      <guid>/post/2019-07-22-introducing-teamr/</guid>
      <description>

&lt;p&gt;Today I am so pleased to introduce my first CRAN package for sending
formatted messages to Microsoft Teams,
&lt;a href=&#34;https://github.com/wwwjk366/teamr&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;teamr&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Motivation is simple here. For years I have been using Slack and built
many slash commands and apps using incoming webhooks with R, but ever
since I started to use Teams, I found that we will have the same needs
for communicating with R as well. So with some inspiration from the
Python package &lt;a href=&#34;https://pypi.org/project/pymsteams/&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;pymsteams&lt;/code&gt;&lt;/a&gt;. I
created &lt;code&gt;teamr&lt;/code&gt; package with the hope that this package will provide a
simple and clean way to talk to Teams from R.&lt;/p&gt;

&lt;h2 id=&#34;installation&#34;&gt;Installation&lt;/h2&gt;

&lt;p&gt;You can install the released version of teamr from
&lt;a href=&#34;https://CRAN.R-project.org&#34; target=&#34;_blank&#34;&gt;CRAN&lt;/a&gt; with:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&amp;quot;teamr&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And the development version from &lt;a href=&#34;https://github.com/&#34; target=&#34;_blank&#34;&gt;GitHub&lt;/a&gt; with:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# install.packages(&amp;quot;devtools&amp;quot;)
devtools::install_github(&amp;quot;wwwjk366/teamr&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;example&#34;&gt;Example&lt;/h2&gt;

&lt;p&gt;This is a basic example of send a simple titled message to MS Teams:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(teamr)

# initiate new connector card object
cc &amp;lt;- connector_card$new(hookurl = &amp;quot;https://outlook.office.com/webhook/...&amp;quot;)
# add text
cc$text(&amp;quot;This is text of main body.&amp;quot;)
# add title
cc$title(&amp;quot;This is message title&amp;quot;)
# add hyperlink button
cc$add_link_button(&amp;quot;Read more&amp;quot;, &amp;quot;https://www.google.com&amp;quot;)
# change theme color
cc$color(&amp;quot;#008000&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can print out the payload that will be sending to given webhook using
&lt;code&gt;print&lt;/code&gt; method&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# print out the payload for checking
cc$print()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Card: 
  hookurl: https://outlook.office.com/webhook/...
  payload:  {&amp;quot;text&amp;quot;:&amp;quot;This is text of main body.&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;This is message title&amp;quot;,&amp;quot;potentialAction&amp;quot;:[{&amp;quot;@context&amp;quot;:&amp;quot;http://schema.org&amp;quot;,&amp;quot;@type&amp;quot;:&amp;quot;ViewAction&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;Read more&amp;quot;,&amp;quot;target&amp;quot;:[&amp;quot;https://www.google.com&amp;quot;]}],&amp;quot;themeColor&amp;quot;:&amp;quot;#008000&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Our &lt;code&gt;JSON&lt;/code&gt; payload looks good, time to send it out :)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# send to Teams
cc$send()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[1] TRUE
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;send&lt;/code&gt; menthod will return &lt;code&gt;TRUE&lt;/code&gt; if send was successful (status code
200). If it failed, it will return the reponse object for further
investigation. Our message with a link button will looks like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;media/main1.PNG&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;You probably noticed now that this package is built using &lt;code&gt;R6&lt;/code&gt;
class(very nice tutorial by Hadley
&lt;a href=&#34;https://adv-r.hadley.nz/r6.html&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;). I decide to do this way
because by using OOP concept, it will give use a feeling that you are
“building” your message by adding something piece by piece. At the same
time the code will be highly readable and easy to understand. &lt;code&gt;teamr&lt;/code&gt;
has 3 main classes as of today — &lt;code&gt;connector_card&lt;/code&gt;, &lt;code&gt;card_section&lt;/code&gt; and
&lt;code&gt;action_card&lt;/code&gt;. For example, let’s add a section to our message:&lt;/p&gt;

&lt;h2 id=&#34;message-with-sections&#34;&gt;Message with sections&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;#initiate new card section object
sec &amp;lt;- card_section$new()

sec$text(sec_text = &amp;quot;2018-19 Finals MVP&amp;quot;)
sec$add_fact(fname = &amp;quot;Position&amp;quot;, fvalue = &amp;quot;Forward&amp;quot;)
sec$title(sec_title = &amp;quot;Player Info&amp;quot;)
sec$activity_image(sec_activitiy_image = &amp;quot;https://d2cwpp38twqe55.cloudfront.net/req/201905091/images/players/leonaka01.jpg&amp;quot;)
sec$activity_title(sec_activity_title = &amp;quot;Kawhi Leonard&amp;quot;)
sec$activity_sub_title(sec_activitiy_subtitle = &amp;quot;LA Clippers&amp;quot;)
sec$activity_text(sec_activitiy_text = &amp;quot;Activity text&amp;quot;)
cc$add_section(new_section = sec)
cc$send()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[1] TRUE
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is what you will get on your Teams channel:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;media/kawhi1.PNG&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;message-with-action-cards&#34;&gt;Message with action cards&lt;/h2&gt;

&lt;p&gt;Teams also support sending actionable messages. You can add a button to
your message which can send HTTP reqeust to a certain URL with different
type of inputs.&lt;/p&gt;

&lt;p&gt;In the following example, I will add a multilined text input, a date
selector and a multiple choice input to our message. Simply changing
&lt;code&gt;target = &amp;quot;http://...&amp;quot;&lt;/code&gt; in &lt;code&gt;add_actions&lt;/code&gt; method to the URL you want the
reponse payload to be sent to:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# create new action card
pa &amp;lt;- action_card$new(type = &amp;quot;ActionCard&amp;quot;, name = &amp;quot;Add comment&amp;quot;)
# add default actions to card
pa$add_actions(type = &amp;quot;HttpPOST&amp;quot;, name = &amp;quot;Save&amp;quot;, target = &amp;quot;http://...&amp;quot;)
# add text inputs
pa$add_text_inputs(id = &amp;quot;comment&amp;quot;, title = &amp;quot;Add comment for this task&amp;quot;, is_multi_line = TRUE)
# save to the card object
cc$add_potential_action(pa)

pa2 &amp;lt;- action_card$new(type = &amp;quot;ActionCard&amp;quot;, name = &amp;quot;Add Date&amp;quot;)
pa2$add_actions(type = &amp;quot;HttpPOST&amp;quot;, name = &amp;quot;Save&amp;quot;, target = &amp;quot;http://...&amp;quot;)
pa2$add_date_inputs(id = &amp;quot;date&amp;quot;, title = &amp;quot;Add Date for this task&amp;quot;)
cc$add_potential_action(pa2)

pa3 &amp;lt;- action_card$new(type = &amp;quot;ActionCard&amp;quot;, name = &amp;quot;Add Options&amp;quot;)
pa3$add_actions(type = &amp;quot;HttpPOST&amp;quot;, name = &amp;quot;Save&amp;quot;, target = &amp;quot;http://...&amp;quot;)
# add multiple choices. note that choices must be a nested named list
pa3$add_mchoice_inputs(id = &amp;quot;mchoice&amp;quot;, 
                       title = &amp;quot;Choice one&amp;quot;, 
                       is_multi_select = TRUE, 
                       choices = list(
                         list(display=&amp;quot;In Progress&amp;quot;, value=1),
                         list(display=&amp;quot;Active&amp;quot;, value=2),
                         list(display=&amp;quot;Close&amp;quot;, value=3))
                       )
cc$add_potential_action(pa3)

cc$send()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[1] TRUE
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;media/teamr.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;If you want to learn more regarding Microsoft Connectors, you check out
the offical doc
&lt;a href=&#34;https://docs.microsoft.com/en-us/microsoftteams/platform/concepts/connectors/connectors-using&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;

&lt;p&gt;This is my very first package on CRAN so if you found any bugs please
report here &lt;a href=&#34;https://github.com/wwwjk366/teamr/issues&#34; target=&#34;_blank&#34;&gt;https://github.com/wwwjk366/teamr/issues&lt;/a&gt;. I do have plan
to add more functionality to the package so stay tuned!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Preprocess Text in Python --- A Cleaner and Faster Approach</title>
      <link>/post/preprocess-your-text-for-nlp-models-cleaner/</link>
      <pubDate>Thu, 04 Jul 2019 20:14:43 +0000</pubDate>
      
      <guid>/post/preprocess-your-text-for-nlp-models-cleaner/</guid>
      <description>

&lt;h2 id=&#34;motivation&#34;&gt;Motivation&lt;/h2&gt;

&lt;p&gt;Well, I think it all start with one of my favorite tweets from 2013:&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;In Data Science, 80% of time spent prepare data, 20% of time spent complain about need for prepare data.&lt;/p&gt;&amp;mdash; Big Data Borat (@BigDataBorat) &lt;a href=&#34;https://twitter.com/BigDataBorat/status/306596352991830016?ref_src=twsrc%5Etfw&#34;&gt;February 27, 2013&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;When building NLP models, pre-processing your data is extremely important. For example, different stopwords removal, stemming and lemmization might have huge impact on the accuracy of your models. Often times, the order of how you do the cleaning is also critical. Do you want to remove certain words first then tokenize the text? Or tokenize then remove the tokens? What we need is a &lt;strong&gt;clear to understand&lt;/strong&gt; and yet &lt;strong&gt;flexiable&lt;/strong&gt; code to do the pre-processing job. When using R, the pipe operator &lt;code&gt;%&amp;gt;%&lt;/code&gt; kind of taken care of the most part. However, there is no really good equivlent in Python because the natural different of Python and R: &lt;a href=&#34;https://medium.com/@jondot/functional-programming-with-python-for-people-without-time-1eebdbd9526c&#34; target=&#34;_blank&#34;&gt;(Long but very good read)&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In other words, it’s like saying that when OOP was born, it was also born with the Gang-of-Four design patterns baked into it’s core as its backing theory of thought (outside of types and inheritance and methods etc.), and every implemented OOP language included these patterns and abstractions by default for you to take advantage of, and that these patterns were bullet-proofed by centuries of research. But that can already never be correct — the Singleton pattern is by now widely recognized as an anti-pattern, and GoF authors said they would remove it, if only they could go back in time.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;But we can definitely hack our way around this using Python &lt;strong&gt;Class&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#34;design&#34;&gt;Design&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s create a snippet of text as an example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sample = &amp;quot;&amp;quot;&amp;quot;&amp;lt;h1&amp;gt;Title Goes Here&amp;lt;/h1&amp;gt;
&amp;lt;b&amp;gt;Bolded Text&amp;lt;/b&amp;gt;
&amp;lt;i&amp;gt;Italicized Text&amp;lt;/i&amp;gt;
&amp;lt;img src=&amp;quot;this should all be gone&amp;quot;/&amp;gt;
&amp;lt;a href=&amp;quot;this will be gone, too&amp;quot;&amp;gt;But this will still be here!&amp;lt;/a&amp;gt;
I run. He ran. She is running. Will they stop running?
I talked. She was talking. They talked to them about running. Who ran to the talking runner?
[Some text we don&#39;t want to keep is in here]
¡Sebastián, Nicolás, Alejandro and Jéronimo are going to the store tomorrow morning!
something... is! wrong() with.,; this :: sentence.
I can&#39;t do this anymore. I didn&#39;t know them. Why couldn&#39;t you have dinner at the restaurant?
My favorite movie franchises, in order: Indiana Jones; Marvel Cinematic Universe; Star Wars; Back to the Future; Harry Potter.
Don&#39;t do it.... Just don&#39;t. Billy! I know what you&#39;re doing. This is a great little house you&#39;ve got here.
[This is some other unwanted text]
John: &amp;quot;Well, well, well.&amp;quot;
James: &amp;quot;There, there. There, there.&amp;quot;
&amp;amp;nbsp;&amp;amp;nbsp;
There are a lot of reasons not to do this. There are 101 reasons not to do it. 1000000 reasons, actually.
I have to go get 2 tutus from 2 different stores, too.
22    45   1067   445
{{Here is some stuff inside of double curly braces.}}
{Here is more stuff in single curly braces.}
[DELETE]
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&amp;quot;&amp;quot;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Say you want to strip some html characters and use regular expressions to remove open and close double brackets and anything in between them:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import re, string, unicodedata
from bs4 import BeautifulSoup

def strip_html(text):
    soup = BeautifulSoup(text, &amp;quot;html.parser&amp;quot;)
    return soup.get_text()

def remove_between_square_brackets(text):
    return re.sub(&#39;\[[^]]*\]&#39;, &#39;&#39;, text)

def denoise_text(text):
    text = strip_html(text)
    text = remove_between_square_brackets(text)
    return text

sample = denoise_text(sample)
print(sample)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;    Title Goes Here
    Bolded Text
    Italicized Text
    
    But this will still be here!
    I run. He ran. She is running. Will they stop running?
    I talked. She was talking. They talked to them about running. Who ran to the talking runner?
    
    ¡Sebastián, Nicolás, Alejandro and Jéronimo are going to the store tomorrow morning!
    something... is! wrong() with.,; this :: sentence.
    I can&#39;t do this anymore. I didn&#39;t know them. Why couldn&#39;t you have dinner at the restaurant?
    My favorite movie franchises, in order: Indiana Jones; Marvel Cinematic Universe; Star Wars; Back to the Future; Harry Potter.
    Don&#39;t do it.... Just don&#39;t. Billy! I know what you&#39;re doing. This is a great little house you&#39;ve got here.
    
    John: &amp;quot;Well, well, well.&amp;quot;
    James: &amp;quot;There, there. There, there.&amp;quot;
    
    There are a lot of reasons not to do this. There are 101 reasons not to do it. 1000000 reasons, actually.
    I have to go get 2 tutus from 2 different stores, too.
    22    45   1067   445
    {{Here is some stuff inside of double curly braces.}}
     {Here is more stuff in single curly braces.}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This perfectly demonstrates our normal workflow:
1. Define couple of functions like &lt;code&gt;strip_html()&lt;/code&gt;, &lt;code&gt;remove_punctuation()&lt;/code&gt; &amp;hellip;
2. Run them one by one or define another &amp;ldquo;master function&amp;rdquo; to run them all like above example
3. Found that we need add more functions or change the order of the function runs
4. Make changes to the &amp;ldquo;master function&amp;rdquo; by copy and paste, then re-define it
5. Run new &amp;ldquo;master function&amp;rdquo; on the text
6. Rinse and repeat&lt;/p&gt;

&lt;p&gt;It is not very flexiable and easy to maintain, isn&amp;rsquo;t it?&lt;/p&gt;

&lt;h2 id=&#34;solution&#34;&gt;Solution&lt;/h2&gt;

&lt;p&gt;If we put those functions in a Class and let the function return &lt;code&gt;self&lt;/code&gt;, we can use the dot notation &lt;code&gt;.&lt;/code&gt; to chain them together, at any order!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class cleantext():
    
    def __init__(self, text = None):
        self.text = text
        
    def strip_html(self):
        soup = BeautifulSoup(self.text, &amp;quot;html.parser&amp;quot;)
        self.text = soup.get_text()
        return self

    def remove_between_square_brackets(self):
        self.text = re.sub(&#39;\[[^]]*\]&#39;, &#39;&#39;, self.text)
        return self

    def remove_numbers(self):
        self.text = re.sub(&#39;[-+]?[0-9]+&#39;, &#39;&#39;, self.text)
        return self
    
    def do_all(self, text):
        
        self.text = text
        self = self.strip_html()
        self = self.remove_numbers()
       
        return self.words


&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ct = cleantext(sample)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(ct.strip_html().remove_between_square_brackets().remove_numbers().text)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;    Title Goes Here
    Bolded Text
    Italicized Text
    
    But this will still be here!
    I run. He ran. She is running. Will they stop running?
    I talked. She was talking. They talked to them about running. Who ran to the talking runner?
    
    ¡Sebastián, Nicolás, Alejandro and Jéronimo are going to the store tomorrow morning!
    something... is! wrong() with.,; this :: sentence.
    I can&#39;t do this anymore. I didn&#39;t know them. Why couldn&#39;t you have dinner at the restaurant?
    My favorite movie franchises, in order: Indiana Jones; Marvel Cinematic Universe; Star Wars; Back to the Future; Harry Potter.
    Don&#39;t do it.... Just don&#39;t. Billy! I know what you&#39;re doing. This is a great little house you&#39;ve got here.
    
    John: &amp;quot;Well, well, well.&amp;quot;
    James: &amp;quot;There, there. There, there.&amp;quot;
    
    There are a lot of reasons not to do this. There are  reasons not to do it.  reasons, actually.
    I have to go get  tutus from  different stores, too.
              
    {{Here is some stuff inside of double curly braces.}}
    {Here is more stuff in single curly braces.}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This makes our code readable and easy to manipulate. We can read out our code too &amp;mdash; just read the dot &lt;code&gt;.&lt;/code&gt; as &amp;ldquo;then&amp;rdquo; in your mind :
&amp;gt; sample text &lt;strong&gt;then&lt;/strong&gt; strip html &lt;strong&gt;then&lt;/strong&gt; remove between square brackets &lt;strong&gt;then&lt;/strong&gt; remove numbers&amp;rdquo;&lt;/p&gt;

&lt;h2 id=&#34;full-implementation&#34;&gt;Full implementation&lt;/h2&gt;

&lt;p&gt;So my full definition of the class looks like this: (example and many functions are from KDNugget)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import re, string, unicodedata
import nltk
import contractions
import inflect
from bs4 import BeautifulSoup
from nltk import word_tokenize, sent_tokenize
from nltk.corpus import stopwords
from nltk.stem import LancasterStemmer, WordNetLemmatizer

class cleantext():
    
    def __init__(self, text = &amp;quot;test&amp;quot;):
        self.text = text
        
    def strip_html(self):
        soup = BeautifulSoup(self.text, &amp;quot;html.parser&amp;quot;)
        self.text = soup.get_text()
        return self

    def remove_between_square_brackets(self):
        self.text = re.sub(&#39;\[[^]]*\]&#39;, &#39;&#39;, self.text)
        return self

    def remove_numbers(self):
        self.text = re.sub(&#39;[-+]?[0-9]+&#39;, &#39;&#39;, self.text)
        return self

    def replace_contractions(self):
        &amp;quot;&amp;quot;&amp;quot;Replace contractions in string of text&amp;quot;&amp;quot;&amp;quot;
        self.text = contractions.fix(self.text)
        return self
    
    def get_words(self):
        self.words = nltk.word_tokenize(self.text)
        return self

    def remove_non_ascii(self):
        &amp;quot;&amp;quot;&amp;quot;Remove non-ASCII characters from list of tokenized words&amp;quot;&amp;quot;&amp;quot;
        new_words = []
        for word in self.words:
            new_word = unicodedata.normalize(&#39;NFKD&#39;, word).encode(&#39;ascii&#39;, &#39;ignore&#39;).decode(&#39;utf-8&#39;, &#39;ignore&#39;)
            new_words.append(new_word)
        self.words = new_words
        return self

    def to_lowercase(self):
        &amp;quot;&amp;quot;&amp;quot;Convert all characters to lowercase from list of tokenized words&amp;quot;&amp;quot;&amp;quot;
        new_words = []
        for word in self.words:
            new_word = word.lower()
            new_words.append(new_word)
        self.words = new_words
        return self

    def remove_punctuation(self):
        &amp;quot;&amp;quot;&amp;quot;Remove punctuation from list of tokenized words&amp;quot;&amp;quot;&amp;quot;
        new_words = []
        for word in self.words:
            new_word = re.sub(r&#39;[^\w\s]&#39;, &#39;&#39;, word)
            if new_word != &#39;&#39;:
                new_words.append(new_word)
        self.words = new_words
        return self

    def replace_numbers(self):
        &amp;quot;&amp;quot;&amp;quot;Replace all interger occurrences in list of tokenized words with textual representation&amp;quot;&amp;quot;&amp;quot;
        p = inflect.engine()
        new_words = []
        for word in self.words:
            if word.isdigit():
                new_word = p.number_to_words(word)
                new_words.append(new_word)
            else:
                new_words.append(word)
        self.words = new_words
        return self

    def remove_stopwords(self):
        &amp;quot;&amp;quot;&amp;quot;Remove stop words from list of tokenized words&amp;quot;&amp;quot;&amp;quot;
        new_words = []
        for word in self.words:
            if word not in stopwords.words(&#39;english&#39;):
                new_words.append(word)
        self.words = new_words
        return self

    def stem_words(self):
        &amp;quot;&amp;quot;&amp;quot;Stem words in list of tokenized words&amp;quot;&amp;quot;&amp;quot;
        stemmer = LancasterStemmer()
        stems = []
        for word in self.words:
            stem = stemmer.stem(word)
            stems.append(stem)
        self.words = stems
        return self

    def lemmatize_verbs(self):
        &amp;quot;&amp;quot;&amp;quot;Lemmatize verbs in list of tokenized words&amp;quot;&amp;quot;&amp;quot;
        lemmatizer = WordNetLemmatizer()
        lemmas = []
        for word in self.words:
            lemma = lemmatizer.lemmatize(word, pos=&#39;v&#39;)
            lemmas.append(lemma)
        self.words = lemmas
        return self
    
    def join_words(self):
        self.words = &#39; &#39;.join(self.words)
        return self
    
    def do_all(self, text):
        
        self.text = text
        self = self.strip_html()
        self = self.remove_numbers()
        self = self.replace_contractions()
        self = self.get_words()
        self = self.remove_punctuation()
        self = self.remove_non_ascii()
        self = self.remove_stopwords()
        self = self.stem_words()
        self = self.lemmatize_verbs()
        self = self.join_words()
        
        return self.words
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we can pre-process our text easily, in a chain-like matter:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ct = cleantext(sample)

ct.\
strip_html().\
remove_numbers().\
replace_contractions().\
get_words().\
remove_punctuation().\
remove_non_ascii().\
remove_stopwords().\
stem_words().\
lemmatize_verbs().\
join_words().\
words
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;&#39;titl goe her bold text it text but stil i run he run she run wil stop run i talk she talk they talk run who run talk run som text want keep sebast nicola alejandro jeronimo go stor tomorrow morn someth wrong send i anym i know why could din resta my favorit movy franch ord indian jon marvel cinem univers star war back fut harry pot just bil i know thi gre littl hous get thi unw text john wel wel wel jam ther ther ther lot reason ther reason reason act i go get tut diff stor her stuff insid doubl cur brac her stuff singl cur brac delet&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can easily add or modify any step on your code, it&amp;rsquo;s like a pipeline!&lt;/p&gt;

&lt;h2 id=&#34;apply-on-pandas-dataframe&#34;&gt;Apply on Pandas DataFrame&lt;/h2&gt;

&lt;p&gt;Say right now we have a dataframe and one column contains the string we would like to process. We can easily use &lt;code&gt;apply()&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pandas as pd
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df = pd.DataFrame({&#39;id&#39;: range(0,100), &#39;docs&#39;:sample } )
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;id&lt;/th&gt;
      &lt;th&gt;docs&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;&amp;lt;h1&amp;gt;Title Goes Here&amp;lt;/h1&amp;gt;\n&amp;lt;b&amp;gt;Bolded Text&amp;lt;/b&amp;gt;\n...&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;&amp;lt;h1&amp;gt;Title Goes Here&amp;lt;/h1&amp;gt;\n&amp;lt;b&amp;gt;Bolded Text&amp;lt;/b&amp;gt;\n...&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;&amp;lt;h1&amp;gt;Title Goes Here&amp;lt;/h1&amp;gt;\n&amp;lt;b&amp;gt;Bolded Text&amp;lt;/b&amp;gt;\n...&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;&amp;lt;h1&amp;gt;Title Goes Here&amp;lt;/h1&amp;gt;\n&amp;lt;b&amp;gt;Bolded Text&amp;lt;/b&amp;gt;\n...&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;&amp;lt;h1&amp;gt;Title Goes Here&amp;lt;/h1&amp;gt;\n&amp;lt;b&amp;gt;Bolded Text&amp;lt;/b&amp;gt;\n...&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df[&#39;cleaned_docs&#39;] = df[&#39;docs&#39;].apply(ct.do_all)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;id&lt;/th&gt;
      &lt;th&gt;docs&lt;/th&gt;
      &lt;th&gt;cleaned_docs&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;&amp;lt;h1&amp;gt;Title Goes Here&amp;lt;/h1&amp;gt;\n&amp;lt;b&amp;gt;Bolded Text&amp;lt;/b&amp;gt;\n...&lt;/td&gt;
      &lt;td&gt;titl goe her bold text it text but stil i run ...&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;&amp;lt;h1&amp;gt;Title Goes Here&amp;lt;/h1&amp;gt;\n&amp;lt;b&amp;gt;Bolded Text&amp;lt;/b&amp;gt;\n...&lt;/td&gt;
      &lt;td&gt;titl goe her bold text it text but stil i run ...&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;&amp;lt;h1&amp;gt;Title Goes Here&amp;lt;/h1&amp;gt;\n&amp;lt;b&amp;gt;Bolded Text&amp;lt;/b&amp;gt;\n...&lt;/td&gt;
      &lt;td&gt;titl goe her bold text it text but stil i run ...&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;&amp;lt;h1&amp;gt;Title Goes Here&amp;lt;/h1&amp;gt;\n&amp;lt;b&amp;gt;Bolded Text&amp;lt;/b&amp;gt;\n...&lt;/td&gt;
      &lt;td&gt;titl goe her bold text it text but stil i run ...&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;&amp;lt;h1&amp;gt;Title Goes Here&amp;lt;/h1&amp;gt;\n&amp;lt;b&amp;gt;Bolded Text&amp;lt;/b&amp;gt;\n...&lt;/td&gt;
      &lt;td&gt;titl goe her bold text it text but stil i run ...&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;h2 id=&#34;parallelization-using-dask&#34;&gt;Parallelization using &lt;code&gt;dask&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Care for some speed up using parallelization? No problem. &lt;code&gt;dask&lt;/code&gt; to the rescue. &lt;a href=&#34;https://docs.dask.org/en/latest/&#34; target=&#34;_blank&#34;&gt;(dask documents)&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import dask.dataframe as dd
from dask.multiprocessing import get
import timeit
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The idea here is we partition a pandas dataframe into &amp;ldquo;dask dataframe&amp;rdquo;, then we can run the job parallelly by putting different partition on different workers:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def dask_this(df):
    res = df[&#39;docs&#39;].apply(ct.do_all)
    return res  
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ddata = dd.from_pandas(df, npartitions=10)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;type(ddata)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;dask.dataframe.core.DataFrame
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Doing a benchmark on our dataframes with 100 samples:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import time
start_time = time.time()
res = ddata.map_partitions(dask_this).compute(scheduler=&#39;processes&#39;, num_workers=10)
print(&amp;quot;--- %s seconds ---&amp;quot; % (time.time() - start_time))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;--- 1.2451355457305908 seconds ---
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import time
start_time = time.time()
res = df[&#39;docs&#39;].apply(ct.do_all)
print(&amp;quot;--- %s seconds ---&amp;quot; % (time.time() - start_time))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;--- 8.75901198387146 seconds ---
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;~7x speed up with 10 cores! Lets all start dasking!&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://media.giphy.com/media/sRKg9r2YWeCTG5JTTo/giphy.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Add Sunburst Chart to highcharter Package</title>
      <link>/post/2019-06-13-add-sunburst/add-sunburst-chart-to-highcharter-package/</link>
      <pubDate>Thu, 13 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/2019-06-13-add-sunburst/add-sunburst-chart-to-highcharter-package/</guid>
      <description>
&lt;script src=&#34;./rmarkdown-libs/htmlwidgets/htmlwidgets.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;./rmarkdown-libs/pymjs/pym.v1.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;./rmarkdown-libs/widgetframe-binding/widgetframe.js&#34;&gt;&lt;/script&gt;


&lt;div id=&#34;the-highcharter-package&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;The &lt;code&gt;highcharter&lt;/code&gt; Package&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;highcharter&lt;/code&gt; package &lt;a href=&#34;http://jkunst.com/highcharter/&#34;&gt;link&lt;/a&gt; by Joshua Kunst has long been my favorite data visualization package in R. It created a wonderful API to the famous JS &lt;code&gt;Highcharts&lt;/code&gt; library. &lt;a href=&#34;https://www.highcharts.com/&#34;&gt;link&lt;/a&gt;. Although &lt;code&gt;Highcharts&lt;/code&gt; is not free for commercial use, but I found many functionality of it is unparalleled with other visualization packages like &lt;code&gt;ploty&lt;/code&gt; or &lt;code&gt;sunburstR&lt;/code&gt; or &lt;code&gt;r2d3&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For example, you can easily create an interactive scatterplot with &lt;code&gt;ggplot2&lt;/code&gt; like syntax:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;data(diamonds, economics_long, mpg, package = &amp;quot;ggplot2&amp;quot;)
library(tidyverse)
library(highcharter)
library(widgetframe)

l &amp;lt;- hchart(mpg, &amp;quot;scatter&amp;quot;, hcaes(x = displ, y = hwy, group = class))
frameWidget(l, height = &amp;#39;400&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;htmlwidget-1&#34; style=&#34;width:100%;height:400px;&#34; class=&#34;widgetframe html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-1&#34;&gt;{&#34;x&#34;:{&#34;url&#34;:&#34;/post/2019-06-13-add-sunburst/index_files/figure-html//widgets/widget_unnamed-chunk-1.html&#34;,&#34;options&#34;:{&#34;xdomain&#34;:&#34;*&#34;,&#34;allowfullscreen&#34;:false,&#34;lazyload&#34;:false}},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;p&gt;Or to be more flexible, use the API functions to “build” the chart and fine tuning almost any specs of your charts:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;hc &amp;lt;- highchart() %&amp;gt;% 
  hc_xAxis(categories = citytemp$month) %&amp;gt;% 
  hc_add_series(name = &amp;quot;Tokyo&amp;quot;, data = citytemp$tokyo) %&amp;gt;% 
  hc_add_series(name = &amp;quot;New York&amp;quot;, data = citytemp$new_york) %&amp;gt;% 
  hc_title(text = &amp;quot;This is a title with &amp;lt;i&amp;gt;margin&amp;lt;/i&amp;gt; and &amp;lt;b&amp;gt;Strong or bold text&amp;lt;/b&amp;gt;&amp;quot;,
           margin = 20, align = &amp;quot;left&amp;quot;,
           style = list(color = &amp;quot;#90ed7d&amp;quot;, useHTML = TRUE)) %&amp;gt;% 
  hc_subtitle(text = &amp;quot;And this is a subtitle with more information&amp;quot;,
              align = &amp;quot;left&amp;quot;,
              style = list(color = &amp;quot;#2b908f&amp;quot;, fontWeight = &amp;quot;bold&amp;quot;)) %&amp;gt;% 
  hc_credits(enabled = TRUE, # add credits
             text = &amp;quot;www.link.tomy.site&amp;quot;,
             href = &amp;quot;http://jkunst.com&amp;quot;) %&amp;gt;% 
  hc_legend(align = &amp;quot;left&amp;quot;, verticalAlign = &amp;quot;top&amp;quot;,
            layout = &amp;quot;vertical&amp;quot;, x = 0, y = 100) %&amp;gt;%
  hc_tooltip(crosshairs = TRUE, backgroundColor = &amp;quot;#FCFFC5&amp;quot;,
             shared = TRUE, borderWidth = 5) %&amp;gt;% 
  hc_exporting(enabled = TRUE)

frameWidget(hc, height = &amp;#39;600&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;htmlwidget-2&#34; style=&#34;width:100%;height:600px;&#34; class=&#34;widgetframe html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-2&#34;&gt;{&#34;x&#34;:{&#34;url&#34;:&#34;/post/2019-06-13-add-sunburst/index_files/figure-html//widgets/widget_unnamed-chunk-2.html&#34;,&#34;options&#34;:{&#34;xdomain&#34;:&#34;*&#34;,&#34;allowfullscreen&#34;:false,&#34;lazyload&#34;:false}},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;p&gt;Here. A light weighted, interactive chart with exporting ability and customized tooltip with less than 20 lines of code.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;sunburst-chart&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Sunburst Chart&lt;/h2&gt;
&lt;p&gt;Let’s take a look at an example of sunburst chart by official Highcharts.org (created in jsfiddle, added to this RMD document using iframe):&lt;/p&gt;
&lt;iframe width=&#34;100%&#34; height=&#34;800px&#34; src=&#34;https://jsfiddle.net/wwwjk366/pa72o0Ln/embedded/result,html,js,css&#34; allowfullscreen=&#34;allowfullscreen&#34; frameborder=&#34;0&#34;&gt;
&lt;/iframe&gt;
&lt;p&gt;Sunburst chart shows hierarchy through a series of rings, that are sliced for each category node. Each ring corresponds to a level in the hierarchy, with the central circle representing the root node and the hierarchy moving outwards from it.&lt;/p&gt;
&lt;p&gt;Rings are sliced up and divided based on their hierarchical relationship to the parent slice. The angle of each slice is either divided equally under its parent node or can be made proportional to a value.&lt;/p&gt;
&lt;p&gt;Color can be used to highlight hierarchical groupings or specific categories.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;add-wrapper-to-existing-highcharter&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Add Wrapper to Existing &lt;code&gt;highcharter&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;This is very straightforward since the &lt;code&gt;hc_add_series()&lt;/code&gt; function provides an robust interface to Highcharts series API &lt;a href=&#34;https://api.highcharts.com/highcharts/series&#34;&gt;link&lt;/a&gt;. Moreover, the data structure required of sunburst chart is actually same as treemap chart.&lt;/p&gt;
&lt;p&gt;Assume we have a dataframe with 3 levels(index1, index2 and index3), each observation is also associated with an numeric value:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tibble)
data &amp;lt;- tibble(
  index0 = &amp;quot;Letter&amp;quot;,
  index1 = sample(LETTERS[1:5], 500, replace = T),
  index2 = sample(LETTERS[6:10], 500, replace = T),
  index3 = sample(LETTERS[11:15], 500, replace = T),
  value = rpois(500, 5)  
)

head(data)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# A tibble: 6 x 5
  index0 index1 index2 index3 value
  &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt;  &amp;lt;int&amp;gt;
1 Letter D      F      N          1
2 Letter B      J      M          5
3 Letter A      J      O          4
4 Letter D      J      N          8
5 Letter B      J      M          3
6 Letter D      G      M          8&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and remember we need to parse the data into the format that Highcharts can recognized, which is a nested list:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;
var data = [{
    id: &amp;#39;0.0&amp;#39;,
    parent: &amp;#39;&amp;#39;,
    name: &amp;#39;The World&amp;#39;
}, {
    id: &amp;#39;1.3&amp;#39;,
    parent: &amp;#39;0.0&amp;#39;,
    name: &amp;#39;Asia&amp;#39;
}, {
    id: &amp;#39;1.1&amp;#39;,
    parent: &amp;#39;0.0&amp;#39;,
    name: &amp;#39;Africa&amp;#39;
}, {
    id: &amp;#39;1.2&amp;#39;,
    parent: &amp;#39;0.0&amp;#39;
},
...
}
    &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that every item in the list must have an “id” and “parent”.&lt;/p&gt;
&lt;p&gt;In &lt;code&gt;hctreemap2()&lt;/code&gt; function, author parsed the dataframe into list nicely using &lt;code&gt;purrr&lt;/code&gt; and &lt;code&gt;rlang&lt;/code&gt; package from tidyverse. Do not worry if you don’t understand those “Quasiquotations” &lt;a href=&#34;https://github.com/r-lib/rlang&#34;&gt;link&lt;/a&gt;. It is just syntax sugar using non-standard evaluation. &lt;a href=&#34;https://tidyeval.tidyverse.org/&#34;&gt;more reference&lt;/a&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;group_vars &amp;lt;- c(&amp;quot;index0&amp;quot;,&amp;quot;index1&amp;quot;, &amp;quot;index2&amp;quot;, &amp;quot;index3&amp;quot;)
size_var &amp;lt;- &amp;quot;value&amp;quot;
group_syms &amp;lt;- rlang::syms(group_vars)
size_sym &amp;lt;- rlang::sym(size_var)
  
  if (data %&amp;gt;%
      select(!!!group_syms) %&amp;gt;%
      map(unique) %&amp;gt;%
      unlist() %&amp;gt;%
      anyDuplicated()) stop(&amp;quot;Sunburst data uses same label at multiple levels.&amp;quot;)
  
  data &amp;lt;- data %&amp;gt;% mutate_at(group_vars, as.character)
  
  name_cell &amp;lt;- function(..., depth) paste0(list(...), 1:depth, collapse = &amp;quot;&amp;quot;)
  
  data_at_depth &amp;lt;- function(depth) {
    data %&amp;gt;%
      group_by(!!!group_syms[1:depth]) %&amp;gt;%
      summarise(
        value = sum(!!size_sym)
      ) %&amp;gt;%
      ungroup() %&amp;gt;%
      mutate(
        name = !!group_syms[[depth]],
        level = depth
      ) %&amp;gt;% 
      mutate_at(group_vars, as.character()) %&amp;gt;% 
      {
        if (depth == 1) mutate(., id = paste0(name, 1))
        else {
          mutate(
            .,
            parent = pmap_chr(
              list(!!!group_syms[1:depth - 1]),
              name_cell,
              depth = depth - 1),
            id = paste0(parent, name, depth)
          )
        }
      }
  }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lets look at the dataframe before we parse it to a list:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;sunburst_df &amp;lt;- 1:length(group_vars) %&amp;gt;%
  map(data_at_depth) %&amp;gt;%
  bind_rows() %&amp;gt;% 
  arrange(level)

head(sunburst_df)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# A tibble: 6 x 9
  index0 value name   level id        index1 parent  index2 index3
  &amp;lt;chr&amp;gt;  &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;  &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt; 
1 Letter  2496 Letter     1 Letter1   &amp;lt;NA&amp;gt;   &amp;lt;NA&amp;gt;    &amp;lt;NA&amp;gt;   &amp;lt;NA&amp;gt;  
2 Letter   440 A          2 Letter1A2 A      Letter1 &amp;lt;NA&amp;gt;   &amp;lt;NA&amp;gt;  
3 Letter   575 B          2 Letter1B2 B      Letter1 &amp;lt;NA&amp;gt;   &amp;lt;NA&amp;gt;  
4 Letter   549 C          2 Letter1C2 C      Letter1 &amp;lt;NA&amp;gt;   &amp;lt;NA&amp;gt;  
5 Letter   477 D          2 Letter1D2 D      Letter1 &amp;lt;NA&amp;gt;   &amp;lt;NA&amp;gt;  
6 Letter   455 E          2 Letter1E2 E      Letter1 &amp;lt;NA&amp;gt;   &amp;lt;NA&amp;gt;  &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s take a look at the first couple of items:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;data_list &amp;lt;- sunburst_df %&amp;gt;%
  highcharter::list_parse() %&amp;gt;%
  purrr::map(~.[!is.na(.)])


data_list[1:3]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[[1]]
[[1]]$index0
[1] &amp;quot;Letter&amp;quot;

[[1]]$value
[1] 2496

[[1]]$name
[1] &amp;quot;Letter&amp;quot;

[[1]]$level
[1] 1

[[1]]$id
[1] &amp;quot;Letter1&amp;quot;


[[2]]
[[2]]$index0
[1] &amp;quot;Letter&amp;quot;

[[2]]$value
[1] 440

[[2]]$name
[1] &amp;quot;A&amp;quot;

[[2]]$level
[1] 2

[[2]]$id
[1] &amp;quot;Letter1A2&amp;quot;

[[2]]$index1
[1] &amp;quot;A&amp;quot;

[[2]]$parent
[1] &amp;quot;Letter1&amp;quot;


[[3]]
[[3]]$index0
[1] &amp;quot;Letter&amp;quot;

[[3]]$value
[1] 575

[[3]]$name
[1] &amp;quot;B&amp;quot;

[[3]]$level
[1] 2

[[3]]$id
[1] &amp;quot;Letter1B2&amp;quot;

[[3]]$index1
[1] &amp;quot;B&amp;quot;

[[3]]$parent
[1] &amp;quot;Letter1&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Alright, the data has been parsed into the corresponding format. Now we just need to pass this in to &lt;code&gt;highcharter::hc_add_series()&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;hc &amp;lt;- highchart() %&amp;gt;%
  hc_add_series(data = data_list,
                type = &amp;quot;sunburst&amp;quot;,
                allowDrillToNode = TRUE)

frameWidget(hc, height = &amp;#39;600&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;htmlwidget-3&#34; style=&#34;width:100%;height:600px;&#34; class=&#34;widgetframe html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-3&#34;&gt;{&#34;x&#34;:{&#34;url&#34;:&#34;/post/2019-06-13-add-sunburst/index_files/figure-html//widgets/widget_unnamed-chunk-7.html&#34;,&#34;options&#34;:{&#34;xdomain&#34;:&#34;*&#34;,&#34;allowfullscreen&#34;:false,&#34;lazyload&#34;:false}},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;p&gt;Here we go!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://media.giphy.com/media/rVbAzUUSUC6dO/giphy.gif&#34; /&gt;&lt;/p&gt;
&lt;p&gt;We are able to create the sunburst chart using Highcharts API! &lt;a href=&#34;https://github.com/wwwjk366/highcharter/blob/0a3c53a7ec5547af4998bc0b893f5c44df3469d8/R/hchart-shorcuts.R#L449-L554&#34;&gt;link to full code&lt;/a&gt; Of course it’s a bit ugly now because we didn’t pass any other parameters to the chart.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;more-configurations&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;More Configurations&lt;/h2&gt;
&lt;p&gt;Putting everything together,let’s make the center spot transparent by adding &lt;code&gt;color = &#39;transparent&#39;&lt;/code&gt; arguments and change the sub level coloring by &lt;code&gt;colorVariation = list(key = &#39;brightness&#39;, to = 0.5)&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)
library(highcharter)
library(RColorBrewer)

hc &amp;lt;- tibble(
 index0 = &amp;quot;Letter&amp;quot;,
 index1 = sample(LETTERS[1:5], 500, replace = T),
 index2 = sample(LETTERS[6:10], 500, replace = T),
 index3 = sample(LETTERS[11:15], 500, replace = T),
 value = rpois(500, 5)  
) %&amp;gt;%
 hcsunburst(
   group_vars = c(&amp;quot;index0&amp;quot;,&amp;quot;index1&amp;quot;, &amp;quot;index2&amp;quot;, &amp;quot;index3&amp;quot;),
   size_var = &amp;quot;value&amp;quot;,
   levels = list(
     list(level = 1, color = &amp;#39;transparent&amp;#39;, dataLabels = list(enabled = TRUE)),
     list(level = 2, colorByPoint = TRUE, dataLabels = list(enabled = TRUE)),
     list(level = 3, colorVariation = list(key = &amp;#39;brightness&amp;#39;, to = 0.5),
          dataLabels = list(enabled = TRUE)),
     list(level = 4, colorVariation = list(key = &amp;#39;brightness&amp;#39;, to = -0.5),
          dataLabels = list(enabled = FALSE))
   )
 ) %&amp;gt;% 
 hc_tooltip(pointFormat = &amp;quot;&amp;lt;b&amp;gt;{point.name}&amp;lt;/b&amp;gt;:&amp;lt;br&amp;gt;
            Value: {point.value:,.0f}&amp;lt;br&amp;gt;&amp;quot;)

frameWidget(hc, height = &amp;#39;600&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;htmlwidget-4&#34; style=&#34;width:100%;height:600px;&#34; class=&#34;widgetframe html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-4&#34;&gt;{&#34;x&#34;:{&#34;url&#34;:&#34;/post/2019-06-13-add-sunburst/index_files/figure-html//widgets/widget_cars.html&#34;,&#34;options&#34;:{&#34;xdomain&#34;:&#34;*&#34;,&#34;allowfullscreen&#34;:false,&#34;lazyload&#34;:false}},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;p&gt;&lt;img src=&#34;https://media.giphy.com/media/J1S363SbQFselYWz68/source.gif&#34; /&gt;&lt;/p&gt;
&lt;p&gt;TL;DR — You can start using this function by installing the forked version on my GitHub: &lt;code&gt;devtools::install_github(repo = &amp;quot;wwwjk366/highcharter&amp;quot;)&lt;/code&gt;. I have already initiated a pull request and hopefully the maintainer of `highcharter’ can add this function soon.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Bio</title>
      <link>/bio/</link>
      <pubDate>Thu, 13 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>/bio/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Slides</title>
      <link>/slides/example/</link>
      <pubDate>Tue, 05 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>/slides/example/</guid>
      <description>

&lt;h1 id=&#34;welcome-to-slides&#34;&gt;Welcome to Slides&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://sourcethemes.com/academic/&#34; target=&#34;_blank&#34;&gt;Academic&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;features&#34;&gt;Features&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Efficiently write slides in Markdown&lt;/li&gt;
&lt;li&gt;3-in-1: Create, Present, and Publish your slides&lt;/li&gt;
&lt;li&gt;Supports speaker notes&lt;/li&gt;
&lt;li&gt;Mobile friendly slides&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;controls&#34;&gt;Controls&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Next: &lt;code&gt;Right Arrow&lt;/code&gt; or &lt;code&gt;Space&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Previous: &lt;code&gt;Left Arrow&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Start: &lt;code&gt;Home&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Finish: &lt;code&gt;End&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Overview: &lt;code&gt;Esc&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Speaker notes: &lt;code&gt;S&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Fullscreen: &lt;code&gt;F&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Zoom: &lt;code&gt;Alt + Click&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/hakimel/reveal.js#pdf-export&#34; target=&#34;_blank&#34;&gt;PDF Export&lt;/a&gt;: &lt;code&gt;E&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;code-highlighting&#34;&gt;Code Highlighting&lt;/h2&gt;

&lt;p&gt;Inline code: &lt;code&gt;variable&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Code block:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;porridge = &amp;quot;blueberry&amp;quot;
if porridge == &amp;quot;blueberry&amp;quot;:
    print(&amp;quot;Eating...&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;math&#34;&gt;Math&lt;/h2&gt;

&lt;p&gt;In-line math: $x + y = z$&lt;/p&gt;

&lt;p&gt;Block math:&lt;/p&gt;

&lt;p&gt;$$
f\left( x \right) = \;\frac{{2\left( {x + 4} \right)\left( {x - 4} \right)}}{{\left( {x + 4} \right)\left( {x + 1} \right)}}
$$&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;fragments&#34;&gt;Fragments&lt;/h2&gt;

&lt;p&gt;Make content appear incrementally&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{% fragment %}} One {{% /fragment %}}
{{% fragment %}} **Two** {{% /fragment %}}
{{% fragment %}} Three {{% /fragment %}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Press &lt;code&gt;Space&lt;/code&gt; to play!&lt;/p&gt;

&lt;p&gt;&lt;span class=&#34;fragment &#34; &gt;
   One
&lt;/span&gt;
&lt;span class=&#34;fragment &#34; &gt;
   &lt;strong&gt;Two&lt;/strong&gt;
&lt;/span&gt;
&lt;span class=&#34;fragment &#34; &gt;
   Three
&lt;/span&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;A fragment can accept two optional parameters:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;class&lt;/code&gt;: use a custom style (requires definition in custom CSS)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;weight&lt;/code&gt;: sets the order in which a fragment appears&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;speaker-notes&#34;&gt;Speaker Notes&lt;/h2&gt;

&lt;p&gt;Add speaker notes to your presentation&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;{{% speaker_note %}}
- Only the speaker can read these notes
- Press `S` key to view
{{% /speaker_note %}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Press the &lt;code&gt;S&lt;/code&gt; key to view the speaker notes!&lt;/p&gt;

&lt;aside class=&#34;notes&#34;&gt;
  &lt;ul&gt;
&lt;li&gt;Only the speaker can read these notes&lt;/li&gt;
&lt;li&gt;Press &lt;code&gt;S&lt;/code&gt; key to view&lt;/li&gt;
&lt;/ul&gt;
&lt;/aside&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;themes&#34;&gt;Themes&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;black: Black background, white text, blue links (default)&lt;/li&gt;
&lt;li&gt;white: White background, black text, blue links&lt;/li&gt;
&lt;li&gt;league: Gray background, white text, blue links&lt;/li&gt;
&lt;li&gt;beige: Beige background, dark text, brown links&lt;/li&gt;
&lt;li&gt;sky: Blue background, thin dark text, blue links&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;night: Black background, thick white text, orange links&lt;/li&gt;
&lt;li&gt;serif: Cappuccino background, gray text, brown links&lt;/li&gt;
&lt;li&gt;simple: White background, black text, blue links&lt;/li&gt;
&lt;li&gt;solarized: Cream-colored background, dark green text, blue links&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;


&lt;section data-noprocess data-shortcode-slide
  
      
      data-background-image=&#34;/img/boards.jpg&#34;
  &gt;


&lt;h2 id=&#34;custom-slide&#34;&gt;Custom Slide&lt;/h2&gt;

&lt;p&gt;Customize the slide style and background&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;{{&amp;lt; slide background-image=&amp;quot;/img/boards.jpg&amp;quot; &amp;gt;}}
{{&amp;lt; slide background-color=&amp;quot;#0000FF&amp;quot; &amp;gt;}}
{{&amp;lt; slide class=&amp;quot;my-style&amp;quot; &amp;gt;}}
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;custom-css-example&#34;&gt;Custom CSS Example&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s make headers navy colored.&lt;/p&gt;

&lt;p&gt;Create &lt;code&gt;assets/css/reveal_custom.css&lt;/code&gt; with:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.reveal section h1,
.reveal section h2,
.reveal section h3 {
  color: navy;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;questions&#34;&gt;Questions?&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://discourse.gohugo.io&#34; target=&#34;_blank&#34;&gt;Ask&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://sourcethemes.com/academic/docs/&#34; target=&#34;_blank&#34;&gt;Documentation&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>External Project</title>
      <link>/project/external-project/</link>
      <pubDate>Wed, 27 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>/project/external-project/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Internal Project</title>
      <link>/project/internal-project/</link>
      <pubDate>Wed, 27 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>/project/internal-project/</guid>
      <description>&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.&lt;/p&gt;

&lt;p&gt;Nullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.&lt;/p&gt;

&lt;p&gt;Cras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.&lt;/p&gt;

&lt;p&gt;Suspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.&lt;/p&gt;

&lt;p&gt;Aliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
