[{"authors":["admin"],"categories":null,"content":"\u0026ldquo;You can have data without information, but you cannot have information without data.\u0026rdquo;\nI\u0026rsquo;m an accomplished data scientist and thought leader with 8+ years of experience of research and bring to market advance analytics and machine learning solutions. I have been extremely lucky to work in many different realms, including retail, finance, marketing and even gaming. I like data. Manipulating it, modeling it, making it (simulation), visualizing it and yes, even cleaning it. Also as a person with insatiable intellectual curiosity, I am passionate about finding actionable insights hidden in vast amounts of raw data.\n","date":1563740083,"expirydate":-62135596800,"kind":"taxonomy","lang":"en","lastmod":1563740083,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"/authors/admin/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/admin/","section":"authors","summary":"\u0026ldquo;You can have data without information, but you cannot have information without data.\u0026rdquo;\nI\u0026rsquo;m an accomplished data scientist and thought leader with 8+ years of experience of research and bring to market advance analytics and machine learning solutions. I have been extremely lucky to work in many different realms, including retail, finance, marketing and even gaming. I like data. Manipulating it, modeling it, making it (simulation), visualizing it and yes, even cleaning it.","tags":null,"title":"Michael Yan","type":"authors"},{"authors":null,"categories":null,"content":"WIP\n","date":1536451200,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1536451200,"objectID":"59c3ce8e202293146a8a934d37a4070b","permalink":"/courses/example/","publishdate":"2018-09-09T00:00:00Z","relpermalink":"/courses/example/","section":"courses","summary":"Learn how to use R for Data Science, Maching Learning and Data Visulization.","tags":null,"title":"Overview","type":"docs"},{"authors":null,"categories":null,"content":"Coming Soon\n","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"74533bae41439377bd30f645c4677a27","permalink":"/courses/example/example1/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/courses/example/example1/","section":"courses","summary":"Coming Soon","tags":null,"title":"Example Page 1","type":"docs"},{"authors":null,"categories":null,"content":"WIP\n","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"1c2b5a11257c768c90d5050637d77d6a","permalink":"/courses/example/example2/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/courses/example/example2/","section":"courses","summary":"WIP","tags":null,"title":"Example Page 2","type":"docs"},{"authors":[],"categories":null,"content":" Click on the Slides button above to view the built-in slides feature.   Slides can be added in a few ways:\n Create slides using Academic\u0026rsquo;s Slides feature and link using slides parameter in the front matter of the talk file Upload an existing slide deck to static/ and link using url_slides parameter in the front matter of the talk file Embed your slides (e.g. Google Slides) or presentation video on this page using shortcodes.  Further talk details can easily be added to this page using Markdown and $\\rm \\LaTeX$ math code.\n","date":1906549200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1906549200,"objectID":"96344c08df50a1b693cc40432115cbe3","permalink":"/talk/example/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/talk/example/","section":"talk","summary":"An example talk using Academic's Markdown slides feature.","tags":[],"title":"Example Talk","type":"talk"},{"authors":[],"categories":["Python","Tutorial","Visualization"],"content":" I came across a wonderful open source project recently \u0026mdash; Project OSRM (link) \u0026mdash; A modern C++ routing engine for shortest paths in road networks. You can imagine it as a free version of Google Maps API, without live traffic of course. It is very valuable for my work because my current company has large shipping and logistic services. Being able to calculate the distance and directions between locations in a timely fashion will enable us to research and modeling on route optimization, leads generation, etc.\nThe solution itself is quite straightforward and I am able to setup an API sandbox running in a couple of hours.\nFirst you need to get the OSRM back-end running as a container on your machine. The process is very easy to follow on the project\u0026rsquo;s github page here. After that you can easily interact with it in python, let\u0026rsquo;s take a look:\nPackage Needed We need folium package to draw the routes on the map and polyline to decode the routes from the API output. We will talk about that more later.\nimport requests import folium import polyline  Single Request You can request the driving route by supply the latitude and longitude of your start and end points, separate by , and ;\nurl = \u0026quot;http://10.22.168.65:9080/route/v1/driving/-117.851364,33.698206;-117.838925,33.672260\u0026quot; r = requests.get(url) res = r.json() res  {'code': 'Ok', 'routes': [{'geometry': 'gttlEfyhnUpBtC|k@e`Aro@zo@tf@jXhFaMxSe]lDgKlAqIGwTcIyB', 'legs': [{'steps': [], 'distance': 4995.3, 'duration': 409.1, 'summary': '', 'weight': 422.5}], 'distance': 4995.3, 'duration': 409.1, 'weight_name': 'routability', 'weight': 422.5}], 'waypoints': [{'hint': 'O14sgD1eLIAMAQAASQEAAAAAAAAAAAAAWs1fQprEiEIAAAAAAAAAAIYAAAClAAAAAAAAAAAAAACQBgAAnbv5-EQxAgIcu_n4njECAgAAfwLrq6bJ', 'distance': 15.580755, 'name': '', 'location': [-117.851235, 33.698116]}, {'hint': 'S64XgFKuF4BLAAAAKgAAAAAAAAA_AAAA2iJQQqE95kEAAAAAb1YuQksAAAAqAAAAAAAAAD8AAACQBgAA5-z5-MXLAQKz6_n4RMwBAgAArwHrq6bJ', 'distance': 31.847501, 'name': 'Carlson Avenue', 'location': [-117.838617, 33.672133]}]}  The output is easy to follow. This trip has a distance of 4995 meters and travel time of 409 seconds, with the routes encoded using google\u0026rsquo;s Polyline Algorithm. We can use python package polyline to decode it into coordinates:\npolyline.decode('gttlEfyhnUpBtC|k@e`Aro@zo@tf@jXhFaMxSe]lDgKlAqIGwTcIyB')  [(33.69812, -117.85124), (33.69755, -117.85199), (33.69036, -117.84156), (33.68258, -117.84938), (33.67623, -117.85344), (33.67506, -117.85119), (33.67173, -117.84636), (33.67086, -117.8444), (33.67047, -117.84271), (33.67051, -117.83923), (33.67213, -117.83862)]  Now this is something we can work with! Lets wrap it into a function:\ndef get_route(pickup_lon, pickup_lat, dropoff_lon, dropoff_lat): loc = \u0026quot;{},{};{},{}\u0026quot;.format(pickup_lon, pickup_lat, dropoff_lon, dropoff_lat) url = \u0026quot;http://10.22.168.65:9080/route/v1/driving/\u0026quot; r = requests.get(url + loc) if r.status_code!= 200: return {} res = r.json() routes = polyline.decode(res['routes'][0]['geometry']) start_point = [res['waypoints'][0]['location'][1], res['waypoints'][0]['location'][0]] end_point = [res['waypoints'][1]['location'][1], res['waypoints'][1]['location'][0]] distance = res['routes'][0]['distance'] out = {'route':routes, 'start_point':start_point, 'end_point':end_point, 'distance':distance } return out  pickup_lon, pickup_lat, dropoff_lon, dropoff_lat = -117.851364,33.698206,-117.838925,33.672260 test_route = get_route(pickup_lon, pickup_lat, dropoff_lon, dropoff_lat) test_route  {'route': [(33.69812, -117.85124), (33.69755, -117.85199), (33.69036, -117.84156), (33.68258, -117.84938), (33.67623, -117.85344), (33.67506, -117.85119), (33.67173, -117.84636), (33.67086, -117.8444), (33.67047, -117.84271), (33.67051, -117.83923), (33.67213, -117.83862)], 'start_point': [33.698116, -117.851235], 'end_point': [33.672133, -117.838617], 'distance': 4995.3}  Draw the route on map Now we have the output nicely organized in coordinates format, let\u0026rsquo;s use folium package to chart the routes and see if it makes sense or not.\ndef get_map(route): m = folium.Map(location=[(route['start_point'][0] + route['end_point'][0])/2, (route['start_point'][1] + route['end_point'][1])/2], zoom_start=13) folium.PolyLine( route['route'], weight=8, color='blue', opacity=0.6 ).add_to(m) folium.Marker( location=route['start_point'], icon=folium.Icon(icon='play', color='green') ).add_to(m) folium.Marker( location=route['end_point'], icon=folium.Icon(icon='stop', color='red') ).add_to(m) return m  get_map(test_route)   I just randomly pick two points in Irvine, CA and the route looks pretty good!\nBenchmarking If I want to use this API to processing data for me, I would like to know how fast it can handle my requests. Here I randomly generated another 1000 coordinates and request the routes from our docker backend as a mini stress test:\nimport numpy as np import pandas as pd lon1 = np.random.uniform(-117.4,-118, 1000).round(6) lon2 = np.random.uniform(-117.4,-118, 1000).round(6) lat1 = np.random.uniform(33.6,33.8, 1000).round(6) lat2 = np.random.uniform(33.6,33.8, 1000).round(6) df = pd.DataFrame({'pickup_lon': lon1, 'pickup_lat': lat1, 'dropoff_lon': lon2, 'dropoff_lat': lat2, })  df.head()   .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; }    pickup_lon pickup_lat dropoff_lon dropoff_lat     0 -117.650723 33.696095 -117.400615 33.675578   1 -117.653614 33.713656 -117.920080 33.679549   2 -117.484076 33.671013 -117.960667 33.741495   3 -117.599436 33.656727 -117.481877 33.643613   4 -117.968429 33.776134 -117.469914 33.739116     %%time df['routes'] = df.apply(lambda x: get_route(x['pickup_lon'], x['pickup_lat'], x['dropoff_lon'], x['dropoff_lat']), axis=1)  CPU times: user 1.55 s, sys: 118 ms, total: 1.67 s Wall time: 5.72 s  Not bad at all! With single container and it can finish the request async in 6 seconds. If we put it on a multiple node docker swarm cluster with proper load balancer, I believe the performance will be very staisfactory.\nCheck with a random data I requested:\nget_map(df.loc[900,'routes'])   Potential applications Now we have seen the beauty of the OSRM. You can imagine how many use cases it could potentially has. I actually used it to generate features in one Kaggle competition \u0026mdash; NYC taxi fare prediction (link). In this competition, you were asked to predict the taxi fares given some basic features including the pickup and dropoff coordinates. As we all know that Haversine distance is different than the actually driving distance, especially in NYC. My intuition is that using the predicted driving distance will increase the model accuracy. Because that is how the taxi fares are calculated anyway. I was absolutely right. By adding this trip distance to the data, I am able to achieve the score of 3.09 which is about 300\u0026frasl;1500 on the leaderboard, using just 10% of the data! (full dataset is too big to work with on my laptop) I will publish my detailed approach in the next posts if you are interested.\nSo what are you waiting for? Starting routing now!\n","date":1583193600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1583273093,"objectID":"f1e4e31453ff5473b5122109e1054f3c","permalink":"/post/2020-03-03-osrm/osrm/","publishdate":"2020-03-03T00:00:00Z","relpermalink":"/post/2020-03-03-osrm/osrm/","section":"post","summary":"I came across a wonderful open source project recently \u0026mdash; Project OSRM (link) \u0026mdash; A modern C++ routing engine for shortest paths in road networks. You can imagine it as a free version of Google Maps API, without live traffic of course. It is very valuable for my work because my current company has large shipping and logistic services. Being able to calculate the distance and directions between locations in a timely fashion will enable us to research and modeling on route optimization, leads generation, etc.","tags":["Map","Routing","Package"],"title":"Python Tutorial of OSRM(Open Sourced Routing Machine) and Applications","type":"post"},{"authors":[],"categories":["Announcement","Python"],"content":" Today I am so pleased to introduce my first PyPI package (so much easier to submit comparing to CRAN) \u0026mdash; gower for calculating gower distance. The core function is originally published by Marcelo Beckmann. There are lots of packages in R that incorporated this method but unfortunately not for Python users. I took this chance to try the whole package-making experience for PyPI and here we go!\nWhat is gower distance? Like normal Euclidean distance or cosine distance, Gower distance is a distance measure. However, it can be used to calculate distance between two entity whose attribute has a mixed of categorical and numerical values. Why this is important? Many common clustering algorithms, e.g. K-means clustering - only works when all variables are numeric. Gower (1971) A general coefficient of similarity and some of its properties. Biometrics 27 857–874.\nI won\u0026rsquo;t talk about the math behind it here but if you are interested there are tons of good material out there besides of Gower\u0026rsquo;s original paper:\n https://rstudio-pubs-static.s3.amazonaws.com/423873_adfdb38bce8d47579f6dc916dd67ae75.html#fnref2 https://towardsdatascience.com/clustering-on-mixed-type-data-8bbd0a2569c3 https://www.math.vu.nl/~sbhulai/papers/thesis-vandenhoven.pdf  Installation You can install directly from PyPI using pip:\npip install gower\nCalculate Gower Distance import numpy as np import pandas as pd Xd=pd.DataFrame({'age':[21,21,19, 30,21,21,19,30], 'gender':['M','M','M','M','F','F','F','F'], 'civil_status':['MARRIED','SINGLE','SINGLE','SINGLE','MARRIED','SINGLE','WIDOW','DIVORCED'], 'salary':[3000.0,1200.0 ,32000.0,1800.0 ,2900.0 ,1100.0 ,10000.0,1500.0], 'has_children':[1,0,1,1,1,0,0,1], 'available_credit':[2200,100,22000,1100,2000,100,6000,2200]}) Yd = Xd.iloc[0:1,:]  First create some fake data called Xd and Yd as pandas dataframe:\nXd   .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; }    age gender civil_status salary has_children available_credit     0 21 M MARRIED 3000.0 1 2200   1 21 M SINGLE 1200.0 0 100   2 19 M SINGLE 32000.0 1 22000   3 30 M SINGLE 1800.0 1 1100   4 21 F MARRIED 2900.0 1 2000   5 21 F SINGLE 1100.0 0 100   6 19 F WIDOW 10000.0 0 6000   7 30 F DIVORCED 1500.0 1 2200     Yd   .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; }    age gender civil_status salary has_children available_credit     0 21 M MARRIED 3000.0 1 2200     Compute distance matrix Main function for the package is gower.gower_matrix(). This function has 4 arguments:\n data_x : input data data_y : default None weight : weight of each variable, default to be a vector of 1 cat_features : a boolean vector indicates categorical features, default None and function will determine by itself  Let\u0026rsquo;s run it on our dataframe Xd\nimport gower gower.gower_matrix(Xd)  array([[0. , 0.3590238 , 0.5040732 , 0.31787416, 0.16872811, 0.52622986, 0.59697855, 0.47778758], [0.3590238 , 0. , 0.52976364, 0.3138769 , 0.523629 , 0.16720603, 0.45600235, 0.6539635 ], [0.5040732 , 0.52976364, 0. , 0.48861402, 0.6728013 , 0.6969697 , 0.740428 , 0.8151941 ], [0.31787416, 0.3138769 , 0.48861402, 0. , 0.4824794 , 0.48108295, 0.74818605, 0.34332284], [0.16872811, 0.523629 , 0.6728013 , 0.4824794 , 0. , 0.35750175, 0.43237334, 0.3121036 ], [0.52622986, 0.16720603, 0.6969697 , 0.48108295, 0.35750175, 0. , 0.2898751 , 0.4878362 ], [0.59697855, 0.45600235, 0.740428 , 0.74818605, 0.43237334, 0.2898751 , 0. , 0.57476616], [0.47778758, 0.6539635 , 0.8151941 , 0.34332284, 0.3121036 , 0.4878362 , 0.57476616, 0. ]], dtype=float32)  Let\u0026rsquo;s try to treat them all as categorical features:\ngower.gower_matrix(Xd, cat_features = [True, True,True,True,True,True])  array([[0. , 0.6666667 , 0.6666667 , 0.6666667 , 0.5 , 0.8333333 , 1. , 0.6666667 ], [0.6666667 , 0. , 0.6666667 , 0.6666667 , 0.8333333 , 0.33333334, 0.8333333 , 1. ], [0.6666667 , 0.6666667 , 0. , 0.5 , 0.8333333 , 0.8333333 , 0.8333333 , 0.8333333 ], [0.6666667 , 0.6666667 , 0.5 , 0. , 0.8333333 , 0.8333333 , 1. , 0.6666667 ], [0.5 , 0.8333333 , 0.8333333 , 0.8333333 , 0. , 0.6666667 , 0.8333333 , 0.6666667 ], [0.8333333 , 0.33333334, 0.8333333 , 0.8333333 , 0.6666667 , 0. , 0.6666667 , 0.8333333 ], [1. , 0.8333333 , 0.8333333 , 1. , 0.8333333 , 0.6666667 , 0. , 0.8333333 ], [0.6666667 , 1. , 0.8333333 , 0.6666667 , 0.6666667 , 0.8333333 , 0.8333333 , 0. ]], dtype=float32)  It also supports array inputs:\nX = np.asarray(Xd) gower.gower_matrix(X)  array([[0. , 0.3590238 , 0.5040732 , 0.31787416, 0.16872811, 0.52622986, 0.59697855, 0.47778758], [0.3590238 , 0. , 0.52976364, 0.3138769 , 0.523629 , 0.16720603, 0.45600235, 0.6539635 ], [0.5040732 , 0.52976364, 0. , 0.48861402, 0.6728013 , 0.6969697 , 0.740428 , 0.8151941 ], [0.31787416, 0.3138769 , 0.48861402, 0. , 0.4824794 , 0.48108295, 0.74818605, 0.34332284], [0.16872811, 0.523629 , 0.6728013 , 0.4824794 , 0. , 0.35750175, 0.43237334, 0.3121036 ], [0.52622986, 0.16720603, 0.6969697 , 0.48108295, 0.35750175, 0. , 0.2898751 , 0.4878362 ], [0.59697855, 0.45600235, 0.740428 , 0.74818605, 0.43237334, 0.2898751 , 0. , 0.57476616], [0.47778758, 0.6539635 , 0.8151941 , 0.34332284, 0.3121036 , 0.4878362 , 0.57476616, 0. ]], dtype=float32)  Find top n similar items One intuition for me to create this package is to use it at work. I usually need to find look-alike customer for my company. E.g. one customer with certain KPI and properties \u0026mdash; location, tenure, RFM metrics etc and they are often mixed type. Gower distance can easily be calculated the distance between them and allows me to give certain variables higher/lower weight.\ngower.gower_topn(Xd.iloc[0:1,:], Xd, n = 5)  {'index': array([0, 4, 3, 1, 7]), 'values': array([0. , 0.16872811, 0.31787416, 0.3590238 , 0.47778758], dtype=float32)}  The function will return two arrays. The index of the top 5 closest records and their distance in decimals\nApplication in Hierarchical Clustering The most popular use cases for mathematical distances are clustering. cluster module in scipy provided the ability to use custom distance matrix to do hierarchical clustering. Let\u0026rsquo;s run a simple clustering model on our toy data. First we need to create the linkage using our precomputed distance matrix:\nimport numpy as np import matplotlib.pyplot as plt from scipy.cluster.hierarchy import linkage, fcluster, dendrogram dm = gower.gower_matrix(X) Zd = linkage(dm)  /opt/conda/lib/python3.7/site-packages/ipykernel_launcher.py:6: ClusterWarning: scipy.cluster: The symmetric non-negative hollow observation matrix looks suspiciously like an uncondensed distance matrix  Say we want total of 3 clusters:\ncld = fcluster(Zd, 3, criterion='maxclust') cld  array([2, 1, 3, 2, 2, 1, 1, 2], dtype=int32)  We can also inspect the dendrogram created from our distance matrix:\ndendrogram(Zd)  This package will be maintained so please feel free to report bug and issues here: (https://github.com/wwwjk366/gower/issues).\nLast but not least:\n","date":1576454400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1576527803,"objectID":"55fdd039e740072e7a0ef550e1a0752b","permalink":"/post/2019-12-16-introducing-python-package-gower/","publishdate":"2019-12-16T00:00:00Z","relpermalink":"/post/2019-12-16-introducing-python-package-gower/","section":"post","summary":"Today I am so pleased to introduce my first PyPI package (so much easier to submit comparing to CRAN) \u0026mdash; gower for calculating gower distance. The core function is originally published by Marcelo Beckmann. There are lots of packages in R that incorporated this method but unfortunately not for Python users. I took this chance to try the whole package-making experience for PyPI and here we go!\nWhat is gower distance?","tags":["Python","Package","Clustering"],"title":"Introducing Python Package --- gower","type":"post"},{"authors":[],"categories":["R","Python","Tutorial"],"content":" Intuition I was working with an Elasticsearch project on AWS using Python and the requests_aws4auth package worked like a charm for me. Never had any issue regarding the authentication (AWS V4 could be hard to work with sometimes). However, when I trying to create a Shiny app for my project, the problem emerged. I just couldn’t get the V4 auth to work with httr in R. I tried aws.signature package on Github but keep getting request header issues. Then I remembered that JJ Alaire from Rstudio created this amazing package reticulate (link) claiming the ability to import Python packages into R. Therefore I am intrigued to give it a try!\n The Syntax After install this package, the actually syntax is quite simple.\nLoad the package and point it to the location of your Python (I’m using Ubuntu here):\nlibrary(reticulate) use_python(\u0026quot;/usr/local/bin/python\u0026quot;) Then you can easily load and call Python functions! For example, a simple listdir function from os package:\nos \u0026lt;- import(\u0026quot;os\u0026quot;) os$listdir(\u0026quot;.\u0026quot;) ## [1] \u0026quot;index.html\u0026quot; \u0026quot;featured.png\u0026quot; \u0026quot;index.Rmd\u0026quot;  In Shiny All I did was adding those to the global.R script (the script I source first in server.R)\npy_awsauth \u0026lt;- import(\u0026quot;requests_aws4auth\u0026quot;) py_requests \u0026lt;- import(\u0026quot;requests\u0026quot;) region \u0026lt;- \u0026#39;us-east-2\u0026#39; service \u0026lt;- \u0026#39;execute-api\u0026#39; credentials \u0026lt;- aws.signature::locate_credentials() authr \u0026lt;- py_awsauth$AWS4Auth(credentials$key, credentials$secret, region, service, session_token=credentials$session_token) url \u0026lt;- \u0026#39;https://.....\u0026#39;  As you can see I am setting up the AWS connection using my local stored credentials. And the next step is to send HTTP request using Python requests package.\nOne thing to noticed is that you cannot use nested list for your payload as you would do that if you are using R httr package. You have to create a Python dictionary object as your payload using reticulate::py_dict() function:\n params \u0026lt;- reticulate::py_dict(c(\u0026quot;x\u0026quot;, \u0026quot;y\u0026quot;), c(...,...)) response \u0026lt;- py_requests$get(url, auth = authr,params = params) res \u0026lt;- response$json() It worked like magic!\n Thoughts This is a good example of why I always encouraging Data Scientist to learn both R and Python. Many people only proficient in one and often has biased opinion against the other. Why not learn both so you can use the amazing package in R like shiny and equivalently amazing packages like ortools (I will write another post on this) at the same time!\n ","date":1575504000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1575568188,"objectID":"e8cbae867ae0ebbaef548eb17e77989d","permalink":"/post/2019-12-05-authenticating-aws-signature-v4-in-r-using-python-backend/","publishdate":"2019-12-05T00:00:00Z","relpermalink":"/post/2019-12-05-authenticating-aws-signature-v4-in-r-using-python-backend/","section":"post","summary":"Intuition I was working with an Elasticsearch project on AWS using Python and the requests_aws4auth package worked like a charm for me. Never had any issue regarding the authentication (AWS V4 could be hard to work with sometimes). However, when I trying to create a Shiny app for my project, the problem emerged. I just couldn’t get the V4 auth to work with httr in R. I tried aws.signature package on Github but keep getting request header issues.","tags":["Python","R","AWS"],"title":"Authenticating AWS (Signature V4) in R using Python Backend","type":"post"},{"authors":null,"categories":null,"content":"My blog posts are released under a Creative Commons Attribution-ShareAlike 4.0 International License.\n  \n","date":1575500400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1575500400,"objectID":"53e892b8b41cc4caece1cfd5ef21d6e7","permalink":"/license/","publishdate":"2019-12-05T00:00:00+01:00","relpermalink":"/license/","section":"","summary":"My blog posts are released under a Creative Commons Attribution-ShareAlike 4.0 International License.","tags":null,"title":"LICENSE: CC-BY-SA","type":"page"},{"authors":["Michael Yan"],"categories":["Blog","Announcement"],"content":" Today I am so pleased to introduce my first CRAN package for sending formatted messages to Microsoft Teams, teamr.\nMotivation is simple here. For years I have been using Slack and built many slash commands and apps using incoming webhooks with R, but ever since I started to use Teams, I found that we will have the same needs for communicating with R as well. So with some inspiration from the Python package pymsteams. I created teamr package with the hope that this package will provide a simple and clean way to talk to Teams from R.\nInstallation You can install the released version of teamr from CRAN with:\ninstall.packages(\u0026quot;teamr\u0026quot;)  And the development version from GitHub with:\n# install.packages(\u0026quot;devtools\u0026quot;) devtools::install_github(\u0026quot;wwwjk366/teamr\u0026quot;)  Example This is a basic example of send a simple titled message to MS Teams:\nlibrary(teamr) # initiate new connector card object cc \u0026lt;- connector_card$new(hookurl = \u0026quot;https://outlook.office.com/webhook/...\u0026quot;) # add text cc$text(\u0026quot;This is text of main body.\u0026quot;) # add title cc$title(\u0026quot;This is message title\u0026quot;) # add hyperlink button cc$add_link_button(\u0026quot;Read more\u0026quot;, \u0026quot;https://www.google.com\u0026quot;) # change theme color cc$color(\u0026quot;#008000\u0026quot;)  We can print out the payload that will be sending to given webhook using print method\n# print out the payload for checking cc$print()  Card: hookurl: https://outlook.office.com/webhook/... payload: {\u0026quot;text\u0026quot;:\u0026quot;This is text of main body.\u0026quot;,\u0026quot;title\u0026quot;:\u0026quot;This is message title\u0026quot;,\u0026quot;potentialAction\u0026quot;:[{\u0026quot;@context\u0026quot;:\u0026quot;http://schema.org\u0026quot;,\u0026quot;@type\u0026quot;:\u0026quot;ViewAction\u0026quot;,\u0026quot;name\u0026quot;:\u0026quot;Read more\u0026quot;,\u0026quot;target\u0026quot;:[\u0026quot;https://www.google.com\u0026quot;]}],\u0026quot;themeColor\u0026quot;:\u0026quot;#008000\u0026quot;}  Our JSON payload looks good, time to send it out :)\n# send to Teams cc$send()  [1] TRUE  send menthod will return TRUE if send was successful (status code 200). If it failed, it will return the reponse object for further investigation. Our message with a link button will looks like this:\nYou probably noticed now that this package is built using R6 class(very nice tutorial by Hadley here). I decide to do this way because by using OOP concept, it will give use a feeling that you are “building” your message by adding something piece by piece. At the same time the code will be highly readable and easy to understand. teamr has 3 main classes as of today — connector_card, card_section and action_card. For example, let’s add a section to our message:\nMessage with sections #initiate new card section object sec \u0026lt;- card_section$new() sec$text(sec_text = \u0026quot;2018-19 Finals MVP\u0026quot;) sec$add_fact(fname = \u0026quot;Position\u0026quot;, fvalue = \u0026quot;Forward\u0026quot;) sec$title(sec_title = \u0026quot;Player Info\u0026quot;) sec$activity_image(sec_activitiy_image = \u0026quot;https://d2cwpp38twqe55.cloudfront.net/req/201905091/images/players/leonaka01.jpg\u0026quot;) sec$activity_title(sec_activity_title = \u0026quot;Kawhi Leonard\u0026quot;) sec$activity_sub_title(sec_activitiy_subtitle = \u0026quot;LA Clippers\u0026quot;) sec$activity_text(sec_activitiy_text = \u0026quot;Activity text\u0026quot;) cc$add_section(new_section = sec) cc$send()  [1] TRUE  This is what you will get on your Teams channel:\nMessage with action cards Teams also support sending actionable messages. You can add a button to your message which can send HTTP reqeust to a certain URL with different type of inputs.\nIn the following example, I will add a multilined text input, a date selector and a multiple choice input to our message. Simply changing target = \u0026quot;http://...\u0026quot; in add_actions method to the URL you want the reponse payload to be sent to:\n# create new action card pa \u0026lt;- action_card$new(type = \u0026quot;ActionCard\u0026quot;, name = \u0026quot;Add comment\u0026quot;) # add default actions to card pa$add_actions(type = \u0026quot;HttpPOST\u0026quot;, name = \u0026quot;Save\u0026quot;, target = \u0026quot;http://...\u0026quot;) # add text inputs pa$add_text_inputs(id = \u0026quot;comment\u0026quot;, title = \u0026quot;Add comment for this task\u0026quot;, is_multi_line = TRUE) # save to the card object cc$add_potential_action(pa) pa2 \u0026lt;- action_card$new(type = \u0026quot;ActionCard\u0026quot;, name = \u0026quot;Add Date\u0026quot;) pa2$add_actions(type = \u0026quot;HttpPOST\u0026quot;, name = \u0026quot;Save\u0026quot;, target = \u0026quot;http://...\u0026quot;) pa2$add_date_inputs(id = \u0026quot;date\u0026quot;, title = \u0026quot;Add Date for this task\u0026quot;) cc$add_potential_action(pa2) pa3 \u0026lt;- action_card$new(type = \u0026quot;ActionCard\u0026quot;, name = \u0026quot;Add Options\u0026quot;) pa3$add_actions(type = \u0026quot;HttpPOST\u0026quot;, name = \u0026quot;Save\u0026quot;, target = \u0026quot;http://...\u0026quot;) # add multiple choices. note that choices must be a nested named list pa3$add_mchoice_inputs(id = \u0026quot;mchoice\u0026quot;, title = \u0026quot;Choice one\u0026quot;, is_multi_select = TRUE, choices = list( list(display=\u0026quot;In Progress\u0026quot;, value=1), list(display=\u0026quot;Active\u0026quot;, value=2), list(display=\u0026quot;Close\u0026quot;, value=3)) ) cc$add_potential_action(pa3) cc$send()  [1] TRUE  If you want to learn more regarding Microsoft Connectors, you check out the offical doc here.\nSummary This is my very first package on CRAN so if you found any bugs please report here https://github.com/wwwjk366/teamr/issues. I do have plan to add more functionality to the package so stay tuned!\n","date":1563740083,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1563740083,"objectID":"9b01bd3235a6cd646bf35260568dce85","permalink":"/post/2019-07-22-introducing-teamr/","publishdate":"2019-07-21T20:14:43Z","relpermalink":"/post/2019-07-22-introducing-teamr/","section":"post","summary":"Today I am so pleased to introduce my first CRAN package for sending formatted messages to Microsoft Teams, teamr.\nMotivation is simple here. For years I have been using Slack and built many slash commands and apps using incoming webhooks with R, but ever since I started to use Teams, I found that we will have the same needs for communicating with R as well. So with some inspiration from the Python package pymsteams.","tags":["R","Package","Introduction"],"title":"Introducing teamr Package","type":"post"},{"authors":["Michael Yan"],"categories":["Blog","Tutorial"],"content":" Motivation Well, I think it all start with one of my favorite tweets from 2013:\nIn Data Science, 80% of time spent prepare data, 20% of time spent complain about need for prepare data.\n\u0026mdash; Big Data Borat (@BigDataBorat) February 27, 2013 \nWhen building NLP models, pre-processing your data is extremely important. For example, different stopwords removal, stemming and lemmization might have huge impact on the accuracy of your models. Often times, the order of how you do the cleaning is also critical. Do you want to remove certain words first then tokenize the text? Or tokenize then remove the tokens? What we need is a clear to understand and yet flexiable code to do the pre-processing job. When using R, the pipe operator %\u0026gt;% kind of taken care of the most part. However, there is no really good equivlent in Python because the natural different of Python and R: (Long but very good read)\n In other words, it’s like saying that when OOP was born, it was also born with the Gang-of-Four design patterns baked into it’s core as its backing theory of thought (outside of types and inheritance and methods etc.), and every implemented OOP language included these patterns and abstractions by default for you to take advantage of, and that these patterns were bullet-proofed by centuries of research. But that can already never be correct — the Singleton pattern is by now widely recognized as an anti-pattern, and GoF authors said they would remove it, if only they could go back in time.\n But we can definitely hack our way around this using Python Class\nDesign Let\u0026rsquo;s create a snippet of text as an example:\nsample = \u0026quot;\u0026quot;\u0026quot;\u0026lt;h1\u0026gt;Title Goes Here\u0026lt;/h1\u0026gt; \u0026lt;b\u0026gt;Bolded Text\u0026lt;/b\u0026gt; \u0026lt;i\u0026gt;Italicized Text\u0026lt;/i\u0026gt; \u0026lt;img src=\u0026quot;this should all be gone\u0026quot;/\u0026gt; \u0026lt;a href=\u0026quot;this will be gone, too\u0026quot;\u0026gt;But this will still be here!\u0026lt;/a\u0026gt; I run. He ran. She is running. Will they stop running? I talked. She was talking. They talked to them about running. Who ran to the talking runner? [Some text we don't want to keep is in here] ¡Sebastián, Nicolás, Alejandro and Jéronimo are going to the store tomorrow morning! something... is! wrong() with.,; this :: sentence. I can't do this anymore. I didn't know them. Why couldn't you have dinner at the restaurant? My favorite movie franchises, in order: Indiana Jones; Marvel Cinematic Universe; Star Wars; Back to the Future; Harry Potter. Don't do it.... Just don't. Billy! I know what you're doing. This is a great little house you've got here. [This is some other unwanted text] John: \u0026quot;Well, well, well.\u0026quot; James: \u0026quot;There, there. There, there.\u0026quot; \u0026amp;nbsp;\u0026amp;nbsp; There are a lot of reasons not to do this. There are 101 reasons not to do it. 1000000 reasons, actually. I have to go get 2 tutus from 2 different stores, too. 22 45 1067 445 {{Here is some stuff inside of double curly braces.}} {Here is more stuff in single curly braces.} [DELETE] \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;\u0026quot;\u0026quot;\u0026quot;  Say you want to strip some html characters and use regular expressions to remove open and close double brackets and anything in between them:\nimport re, string, unicodedata from bs4 import BeautifulSoup def strip_html(text): soup = BeautifulSoup(text, \u0026quot;html.parser\u0026quot;) return soup.get_text() def remove_between_square_brackets(text): return re.sub('\\[[^]]*\\]', '', text) def denoise_text(text): text = strip_html(text) text = remove_between_square_brackets(text) return text sample = denoise_text(sample) print(sample)  Title Goes Here Bolded Text Italicized Text But this will still be here! I run. He ran. She is running. Will they stop running? I talked. She was talking. They talked to them about running. Who ran to the talking runner? ¡Sebastián, Nicolás, Alejandro and Jéronimo are going to the store tomorrow morning! something... is! wrong() with.,; this :: sentence. I can't do this anymore. I didn't know them. Why couldn't you have dinner at the restaurant? My favorite movie franchises, in order: Indiana Jones; Marvel Cinematic Universe; Star Wars; Back to the Future; Harry Potter. Don't do it.... Just don't. Billy! I know what you're doing. This is a great little house you've got here. John: \u0026quot;Well, well, well.\u0026quot; James: \u0026quot;There, there. There, there.\u0026quot; There are a lot of reasons not to do this. There are 101 reasons not to do it. 1000000 reasons, actually. I have to go get 2 tutus from 2 different stores, too. 22 45 1067 445 {{Here is some stuff inside of double curly braces.}} {Here is more stuff in single curly braces.}  This perfectly demonstrates our normal workflow: 1. Define couple of functions like strip_html(), remove_punctuation() \u0026hellip; 2. Run them one by one or define another \u0026ldquo;master function\u0026rdquo; to run them all like above example 3. Found that we need add more functions or change the order of the function runs 4. Make changes to the \u0026ldquo;master function\u0026rdquo; by copy and paste, then re-define it 5. Run new \u0026ldquo;master function\u0026rdquo; on the text 6. Rinse and repeat\nIt is not very flexiable and easy to maintain, isn\u0026rsquo;t it?\nSolution If we put those functions in a Class and let the function return self, we can use the dot notation . to chain them together, at any order!\nclass cleantext(): def __init__(self, text = None): self.text = text def strip_html(self): soup = BeautifulSoup(self.text, \u0026quot;html.parser\u0026quot;) self.text = soup.get_text() return self def remove_between_square_brackets(self): self.text = re.sub('\\[[^]]*\\]', '', self.text) return self def remove_numbers(self): self.text = re.sub('[-+]?[0-9]+', '', self.text) return self def do_all(self, text): self.text = text self = self.strip_html() self = self.remove_numbers() return self.words  ct = cleantext(sample)  print(ct.strip_html().remove_between_square_brackets().remove_numbers().text)  Title Goes Here Bolded Text Italicized Text But this will still be here! I run. He ran. She is running. Will they stop running? I talked. She was talking. They talked to them about running. Who ran to the talking runner? ¡Sebastián, Nicolás, Alejandro and Jéronimo are going to the store tomorrow morning! something... is! wrong() with.,; this :: sentence. I can't do this anymore. I didn't know them. Why couldn't you have dinner at the restaurant? My favorite movie franchises, in order: Indiana Jones; Marvel Cinematic Universe; Star Wars; Back to the Future; Harry Potter. Don't do it.... Just don't. Billy! I know what you're doing. This is a great little house you've got here. John: \u0026quot;Well, well, well.\u0026quot; James: \u0026quot;There, there. There, there.\u0026quot; There are a lot of reasons not to do this. There are reasons not to do it. reasons, actually. I have to go get tutus from different stores, too. {{Here is some stuff inside of double curly braces.}} {Here is more stuff in single curly braces.}  This makes our code readable and easy to manipulate. We can read out our code too \u0026mdash; just read the dot . as \u0026ldquo;then\u0026rdquo; in your mind : \u0026gt; sample text then strip html then remove between square brackets then remove numbers\u0026rdquo;\nFull implementation So my full definition of the class looks like this: (example and many functions are from KDNugget)\nimport re, string, unicodedata import nltk import contractions import inflect from bs4 import BeautifulSoup from nltk import word_tokenize, sent_tokenize from nltk.corpus import stopwords from nltk.stem import LancasterStemmer, WordNetLemmatizer class cleantext(): def __init__(self, text = \u0026quot;test\u0026quot;): self.text = text def strip_html(self): soup = BeautifulSoup(self.text, \u0026quot;html.parser\u0026quot;) self.text = soup.get_text() return self def remove_between_square_brackets(self): self.text = re.sub('\\[[^]]*\\]', '', self.text) return self def remove_numbers(self): self.text = re.sub('[-+]?[0-9]+', '', self.text) return self def replace_contractions(self): \u0026quot;\u0026quot;\u0026quot;Replace contractions in string of text\u0026quot;\u0026quot;\u0026quot; self.text = contractions.fix(self.text) return self def get_words(self): self.words = nltk.word_tokenize(self.text) return self def remove_non_ascii(self): \u0026quot;\u0026quot;\u0026quot;Remove non-ASCII characters from list of tokenized words\u0026quot;\u0026quot;\u0026quot; new_words = [] for word in self.words: new_word = unicodedata.normalize('NFKD', word).encode('ascii', 'ignore').decode('utf-8', 'ignore') new_words.append(new_word) self.words = new_words return self def to_lowercase(self): \u0026quot;\u0026quot;\u0026quot;Convert all characters to lowercase from list of tokenized words\u0026quot;\u0026quot;\u0026quot; new_words = [] for word in self.words: new_word = word.lower() new_words.append(new_word) self.words = new_words return self def remove_punctuation(self): \u0026quot;\u0026quot;\u0026quot;Remove punctuation from list of tokenized words\u0026quot;\u0026quot;\u0026quot; new_words = [] for word in self.words: new_word = re.sub(r'[^\\w\\s]', '', word) if new_word != '': new_words.append(new_word) self.words = new_words return self def replace_numbers(self): \u0026quot;\u0026quot;\u0026quot;Replace all interger occurrences in list of tokenized words with textual representation\u0026quot;\u0026quot;\u0026quot; p = inflect.engine() new_words = [] for word in self.words: if word.isdigit(): new_word = p.number_to_words(word) new_words.append(new_word) else: new_words.append(word) self.words = new_words return self def remove_stopwords(self): \u0026quot;\u0026quot;\u0026quot;Remove stop words from list of tokenized words\u0026quot;\u0026quot;\u0026quot; new_words = [] for word in self.words: if word not in stopwords.words('english'): new_words.append(word) self.words = new_words return self def stem_words(self): \u0026quot;\u0026quot;\u0026quot;Stem words in list of tokenized words\u0026quot;\u0026quot;\u0026quot; stemmer = LancasterStemmer() stems = [] for word in self.words: stem = stemmer.stem(word) stems.append(stem) self.words = stems return self def lemmatize_verbs(self): \u0026quot;\u0026quot;\u0026quot;Lemmatize verbs in list of tokenized words\u0026quot;\u0026quot;\u0026quot; lemmatizer = WordNetLemmatizer() lemmas = [] for word in self.words: lemma = lemmatizer.lemmatize(word, pos='v') lemmas.append(lemma) self.words = lemmas return self def join_words(self): self.words = ' '.join(self.words) return self def do_all(self, text): self.text = text self = self.strip_html() self = self.remove_numbers() self = self.replace_contractions() self = self.get_words() self = self.remove_punctuation() self = self.remove_non_ascii() self = self.remove_stopwords() self = self.stem_words() self = self.lemmatize_verbs() self = self.join_words() return self.words  Now we can pre-process our text easily, in a chain-like matter:\nct = cleantext(sample) ct.\\ strip_html().\\ remove_numbers().\\ replace_contractions().\\ get_words().\\ remove_punctuation().\\ remove_non_ascii().\\ remove_stopwords().\\ stem_words().\\ lemmatize_verbs().\\ join_words().\\ words  'titl goe her bold text it text but stil i run he run she run wil stop run i talk she talk they talk run who run talk run som text want keep sebast nicola alejandro jeronimo go stor tomorrow morn someth wrong send i anym i know why could din resta my favorit movy franch ord indian jon marvel cinem univers star war back fut harry pot just bil i know thi gre littl hous get thi unw text john wel wel wel jam ther ther ther lot reason ther reason reason act i go get tut diff stor her stuff insid doubl cur brac her stuff singl cur brac delet'  You can easily add or modify any step on your code, it\u0026rsquo;s like a pipeline!\nApply on Pandas DataFrame Say right now we have a dataframe and one column contains the string we would like to process. We can easily use apply()\nimport pandas as pd  df = pd.DataFrame({'id': range(0,100), 'docs':sample } )  df.head()   .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; }    id docs     0 0 \u0026lt;h1\u0026gt;Title Goes Here\u0026lt;/h1\u0026gt;\\n\u0026lt;b\u0026gt;Bolded Text\u0026lt;/b\u0026gt;\\n...   1 1 \u0026lt;h1\u0026gt;Title Goes Here\u0026lt;/h1\u0026gt;\\n\u0026lt;b\u0026gt;Bolded Text\u0026lt;/b\u0026gt;\\n...   2 2 \u0026lt;h1\u0026gt;Title Goes Here\u0026lt;/h1\u0026gt;\\n\u0026lt;b\u0026gt;Bolded Text\u0026lt;/b\u0026gt;\\n...   3 3 \u0026lt;h1\u0026gt;Title Goes Here\u0026lt;/h1\u0026gt;\\n\u0026lt;b\u0026gt;Bolded Text\u0026lt;/b\u0026gt;\\n...   4 4 \u0026lt;h1\u0026gt;Title Goes Here\u0026lt;/h1\u0026gt;\\n\u0026lt;b\u0026gt;Bolded Text\u0026lt;/b\u0026gt;\\n...     df['cleaned_docs'] = df['docs'].apply(ct.do_all)  df.head()   .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; }    id docs cleaned_docs     0 0 \u0026lt;h1\u0026gt;Title Goes Here\u0026lt;/h1\u0026gt;\\n\u0026lt;b\u0026gt;Bolded Text\u0026lt;/b\u0026gt;\\n... titl goe her bold text it text but stil i run ...   1 1 \u0026lt;h1\u0026gt;Title Goes Here\u0026lt;/h1\u0026gt;\\n\u0026lt;b\u0026gt;Bolded Text\u0026lt;/b\u0026gt;\\n... titl goe her bold text it text but stil i run ...   2 2 \u0026lt;h1\u0026gt;Title Goes Here\u0026lt;/h1\u0026gt;\\n\u0026lt;b\u0026gt;Bolded Text\u0026lt;/b\u0026gt;\\n... titl goe her bold text it text but stil i run ...   3 3 \u0026lt;h1\u0026gt;Title Goes Here\u0026lt;/h1\u0026gt;\\n\u0026lt;b\u0026gt;Bolded Text\u0026lt;/b\u0026gt;\\n... titl goe her bold text it text but stil i run ...   4 4 \u0026lt;h1\u0026gt;Title Goes Here\u0026lt;/h1\u0026gt;\\n\u0026lt;b\u0026gt;Bolded Text\u0026lt;/b\u0026gt;\\n... titl goe her bold text it text but stil i run ...     Parallelization using dask Care for some speed up using parallelization? No problem. dask to the rescue. (dask documents)\nimport dask.dataframe as dd from dask.multiprocessing import get import timeit  The idea here is we partition a pandas dataframe into \u0026ldquo;dask dataframe\u0026rdquo;, then we can run the job parallelly by putting different partition on different workers:\ndef dask_this(df): res = df['docs'].apply(ct.do_all) return res  ddata = dd.from_pandas(df, npartitions=10)  type(ddata)  dask.dataframe.core.DataFrame  Doing a benchmark on our dataframes with 100 samples:\nimport time start_time = time.time() res = ddata.map_partitions(dask_this).compute(scheduler='processes', num_workers=10) print(\u0026quot;--- %s seconds ---\u0026quot; % (time.time() - start_time))  --- 1.2451355457305908 seconds ---  import time start_time = time.time() res = df['docs'].apply(ct.do_all) print(\u0026quot;--- %s seconds ---\u0026quot; % (time.time() - start_time))  --- 8.75901198387146 seconds ---  ~7x speed up with 10 cores! Lets all start dasking!\n","date":1562271283,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1562271283,"objectID":"c5d2201266679a8f03caa8c16d2004ae","permalink":"/post/preprocess-your-text-for-nlp-models-cleaner/","publishdate":"2019-07-04T20:14:43Z","relpermalink":"/post/preprocess-your-text-for-nlp-models-cleaner/","section":"post","summary":"Motivation Well, I think it all start with one of my favorite tweets from 2013:\nIn Data Science, 80% of time spent prepare data, 20% of time spent complain about need for prepare data.\n\u0026mdash; Big Data Borat (@BigDataBorat) February 27, 2013 \nWhen building NLP models, pre-processing your data is extremely important. For example, different stopwords removal, stemming and lemmization might have huge impact on the accuracy of your models.","tags":["Python","NLP","Parallel Computing"],"title":"Preprocess Text in Python --- A Cleaner and Faster Approach","type":"post"},{"authors":null,"categories":null,"content":"","date":1560398400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1560398400,"objectID":"299a077dcf7d88d57edc9080508f2dd4","permalink":"/bio/","publishdate":"2019-06-13T00:00:00-04:00","relpermalink":"/bio/","section":"","summary":"","tags":null,"title":"Bio","type":"widget_page"},{"authors":["Michael Yan"],"categories":["R","Visulization"],"content":"    The highcharter Package The highcharter package link by Joshua Kunst has long been my favorite data visualization package in R. It created a wonderful API to the famous JS Highcharts library. link. Although Highcharts is not free for commercial use, but I found many functionality of it is unparalleled with other visualization packages like ploty or sunburstR or r2d3.\nFor example, you can easily create an interactive scatterplot with ggplot2 like syntax:\ndata(diamonds, economics_long, mpg, package = \u0026quot;ggplot2\u0026quot;) library(tidyverse) library(highcharter) library(widgetframe) l \u0026lt;- hchart(mpg, \u0026quot;scatter\u0026quot;, hcaes(x = displ, y = hwy, group = class)) frameWidget(l, height = \u0026#39;400\u0026#39;)  {\"x\":{\"url\":\"/post/2019-06-13-add-sunburst/index_files/figure-html//widgets/widget_unnamed-chunk-1.html\",\"options\":{\"xdomain\":\"*\",\"allowfullscreen\":false,\"lazyload\":false}},\"evals\":[],\"jsHooks\":[]} Or to be more flexible, use the API functions to “build” the chart and fine tuning almost any specs of your charts:\nhc \u0026lt;- highchart() %\u0026gt;% hc_xAxis(categories = citytemp$month) %\u0026gt;% hc_add_series(name = \u0026quot;Tokyo\u0026quot;, data = citytemp$tokyo) %\u0026gt;% hc_add_series(name = \u0026quot;New York\u0026quot;, data = citytemp$new_york) %\u0026gt;% hc_title(text = \u0026quot;This is a title with \u0026lt;i\u0026gt;margin\u0026lt;/i\u0026gt; and \u0026lt;b\u0026gt;Strong or bold text\u0026lt;/b\u0026gt;\u0026quot;, margin = 20, align = \u0026quot;left\u0026quot;, style = list(color = \u0026quot;#90ed7d\u0026quot;, useHTML = TRUE)) %\u0026gt;% hc_subtitle(text = \u0026quot;And this is a subtitle with more information\u0026quot;, align = \u0026quot;left\u0026quot;, style = list(color = \u0026quot;#2b908f\u0026quot;, fontWeight = \u0026quot;bold\u0026quot;)) %\u0026gt;% hc_credits(enabled = TRUE, # add credits text = \u0026quot;www.link.tomy.site\u0026quot;, href = \u0026quot;http://jkunst.com\u0026quot;) %\u0026gt;% hc_legend(align = \u0026quot;left\u0026quot;, verticalAlign = \u0026quot;top\u0026quot;, layout = \u0026quot;vertical\u0026quot;, x = 0, y = 100) %\u0026gt;% hc_tooltip(crosshairs = TRUE, backgroundColor = \u0026quot;#FCFFC5\u0026quot;, shared = TRUE, borderWidth = 5) %\u0026gt;% hc_exporting(enabled = TRUE) frameWidget(hc, height = \u0026#39;600\u0026#39;)  {\"x\":{\"url\":\"/post/2019-06-13-add-sunburst/index_files/figure-html//widgets/widget_unnamed-chunk-2.html\",\"options\":{\"xdomain\":\"*\",\"allowfullscreen\":false,\"lazyload\":false}},\"evals\":[],\"jsHooks\":[]} Here. A light weighted, interactive chart with exporting ability and customized tooltip with less than 20 lines of code.\n Sunburst Chart Let’s take a look at an example of sunburst chart by official Highcharts.org (created in jsfiddle, added to this RMD document using iframe):\n Sunburst chart shows hierarchy through a series of rings, that are sliced for each category node. Each ring corresponds to a level in the hierarchy, with the central circle representing the root node and the hierarchy moving outwards from it.\nRings are sliced up and divided based on their hierarchical relationship to the parent slice. The angle of each slice is either divided equally under its parent node or can be made proportional to a value.\nColor can be used to highlight hierarchical groupings or specific categories.\n Add Wrapper to Existing highcharter This is very straightforward since the hc_add_series() function provides an robust interface to Highcharts series API link. Moreover, the data structure required of sunburst chart is actually same as treemap chart.\nAssume we have a dataframe with 3 levels(index1, index2 and index3), each observation is also associated with an numeric value:\nlibrary(tibble) data \u0026lt;- tibble( index0 = \u0026quot;Letter\u0026quot;, index1 = sample(LETTERS[1:5], 500, replace = T), index2 = sample(LETTERS[6:10], 500, replace = T), index3 = sample(LETTERS[11:15], 500, replace = T), value = rpois(500, 5) ) head(data) # A tibble: 6 x 5 index0 index1 index2 index3 value \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;int\u0026gt; 1 Letter D F N 1 2 Letter B J M 5 3 Letter A J O 4 4 Letter D J N 8 5 Letter B J M 3 6 Letter D G M 8 and remember we need to parse the data into the format that Highcharts can recognized, which is a nested list:\n var data = [{ id: \u0026#39;0.0\u0026#39;, parent: \u0026#39;\u0026#39;, name: \u0026#39;The World\u0026#39; }, { id: \u0026#39;1.3\u0026#39;, parent: \u0026#39;0.0\u0026#39;, name: \u0026#39;Asia\u0026#39; }, { id: \u0026#39;1.1\u0026#39;, parent: \u0026#39;0.0\u0026#39;, name: \u0026#39;Africa\u0026#39; }, { id: \u0026#39;1.2\u0026#39;, parent: \u0026#39;0.0\u0026#39; }, ... }  Note that every item in the list must have an “id” and “parent”.\nIn hctreemap2() function, author parsed the dataframe into list nicely using purrr and rlang package from tidyverse. Do not worry if you don’t understand those “Quasiquotations” link. It is just syntax sugar using non-standard evaluation. more reference\ngroup_vars \u0026lt;- c(\u0026quot;index0\u0026quot;,\u0026quot;index1\u0026quot;, \u0026quot;index2\u0026quot;, \u0026quot;index3\u0026quot;) size_var \u0026lt;- \u0026quot;value\u0026quot; group_syms \u0026lt;- rlang::syms(group_vars) size_sym \u0026lt;- rlang::sym(size_var) if (data %\u0026gt;% select(!!!group_syms) %\u0026gt;% map(unique) %\u0026gt;% unlist() %\u0026gt;% anyDuplicated()) stop(\u0026quot;Sunburst data uses same label at multiple levels.\u0026quot;) data \u0026lt;- data %\u0026gt;% mutate_at(group_vars, as.character) name_cell \u0026lt;- function(..., depth) paste0(list(...), 1:depth, collapse = \u0026quot;\u0026quot;) data_at_depth \u0026lt;- function(depth) { data %\u0026gt;% group_by(!!!group_syms[1:depth]) %\u0026gt;% summarise( value = sum(!!size_sym) ) %\u0026gt;% ungroup() %\u0026gt;% mutate( name = !!group_syms[[depth]], level = depth ) %\u0026gt;% mutate_at(group_vars, as.character()) %\u0026gt;% { if (depth == 1) mutate(., id = paste0(name, 1)) else { mutate( ., parent = pmap_chr( list(!!!group_syms[1:depth - 1]), name_cell, depth = depth - 1), id = paste0(parent, name, depth) ) } } } Lets look at the dataframe before we parse it to a list:\nsunburst_df \u0026lt;- 1:length(group_vars) %\u0026gt;% map(data_at_depth) %\u0026gt;% bind_rows() %\u0026gt;% arrange(level) head(sunburst_df) # A tibble: 6 x 9 index0 value name level id index1 parent index2 index3 \u0026lt;chr\u0026gt; \u0026lt;int\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;int\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; 1 Letter 2496 Letter 1 Letter1 \u0026lt;NA\u0026gt; \u0026lt;NA\u0026gt; \u0026lt;NA\u0026gt; \u0026lt;NA\u0026gt; 2 Letter 440 A 2 Letter1A2 A Letter1 \u0026lt;NA\u0026gt; \u0026lt;NA\u0026gt; 3 Letter 575 B 2 Letter1B2 B Letter1 \u0026lt;NA\u0026gt; \u0026lt;NA\u0026gt; 4 Letter 549 C 2 Letter1C2 C Letter1 \u0026lt;NA\u0026gt; \u0026lt;NA\u0026gt; 5 Letter 477 D 2 Letter1D2 D Letter1 \u0026lt;NA\u0026gt; \u0026lt;NA\u0026gt; 6 Letter 455 E 2 Letter1E2 E Letter1 \u0026lt;NA\u0026gt; \u0026lt;NA\u0026gt;  Let’s take a look at the first couple of items:\ndata_list \u0026lt;- sunburst_df %\u0026gt;% highcharter::list_parse() %\u0026gt;% purrr::map(~.[!is.na(.)]) data_list[1:3] [[1]] [[1]]$index0 [1] \u0026quot;Letter\u0026quot; [[1]]$value [1] 2496 [[1]]$name [1] \u0026quot;Letter\u0026quot; [[1]]$level [1] 1 [[1]]$id [1] \u0026quot;Letter1\u0026quot; [[2]] [[2]]$index0 [1] \u0026quot;Letter\u0026quot; [[2]]$value [1] 440 [[2]]$name [1] \u0026quot;A\u0026quot; [[2]]$level [1] 2 [[2]]$id [1] \u0026quot;Letter1A2\u0026quot; [[2]]$index1 [1] \u0026quot;A\u0026quot; [[2]]$parent [1] \u0026quot;Letter1\u0026quot; [[3]] [[3]]$index0 [1] \u0026quot;Letter\u0026quot; [[3]]$value [1] 575 [[3]]$name [1] \u0026quot;B\u0026quot; [[3]]$level [1] 2 [[3]]$id [1] \u0026quot;Letter1B2\u0026quot; [[3]]$index1 [1] \u0026quot;B\u0026quot; [[3]]$parent [1] \u0026quot;Letter1\u0026quot; Alright, the data has been parsed into the corresponding format. Now we just need to pass this in to highcharter::hc_add_series()\nhc \u0026lt;- highchart() %\u0026gt;% hc_add_series(data = data_list, type = \u0026quot;sunburst\u0026quot;, allowDrillToNode = TRUE) frameWidget(hc, height = \u0026#39;600\u0026#39;)  {\"x\":{\"url\":\"/post/2019-06-13-add-sunburst/index_files/figure-html//widgets/widget_unnamed-chunk-7.html\",\"options\":{\"xdomain\":\"*\",\"allowfullscreen\":false,\"lazyload\":false}},\"evals\":[],\"jsHooks\":[]} Here we go!\nWe are able to create the sunburst chart using Highcharts API! link to full code Of course it’s a bit ugly now because we didn’t pass any other parameters to the chart.\n More Configurations Putting everything together,let’s make the center spot transparent by adding color = 'transparent' arguments and change the sub level coloring by colorVariation = list(key = 'brightness', to = 0.5)\nlibrary(tidyverse) library(highcharter) library(RColorBrewer) hc \u0026lt;- tibble( index0 = \u0026quot;Letter\u0026quot;, index1 = sample(LETTERS[1:5], 500, replace = T), index2 = sample(LETTERS[6:10], 500, replace = T), index3 = sample(LETTERS[11:15], 500, replace = T), value = rpois(500, 5) ) %\u0026gt;% hcsunburst( group_vars = c(\u0026quot;index0\u0026quot;,\u0026quot;index1\u0026quot;, \u0026quot;index2\u0026quot;, \u0026quot;index3\u0026quot;), size_var = \u0026quot;value\u0026quot;, levels = list( list(level = 1, color = \u0026#39;transparent\u0026#39;, dataLabels = list(enabled = TRUE)), list(level = 2, colorByPoint = TRUE, dataLabels = list(enabled = TRUE)), list(level = 3, colorVariation = list(key = \u0026#39;brightness\u0026#39;, to = 0.5), dataLabels = list(enabled = TRUE)), list(level = 4, colorVariation = list(key = \u0026#39;brightness\u0026#39;, to = -0.5), dataLabels = list(enabled = FALSE)) ) ) %\u0026gt;% hc_tooltip(pointFormat = \u0026quot;\u0026lt;b\u0026gt;{point.name}\u0026lt;/b\u0026gt;:\u0026lt;br\u0026gt; Value: {point.value:,.0f}\u0026lt;br\u0026gt;\u0026quot;) frameWidget(hc, height = \u0026#39;600\u0026#39;)  {\"x\":{\"url\":\"/post/2019-06-13-add-sunburst/index_files/figure-html//widgets/widget_cars.html\",\"options\":{\"xdomain\":\"*\",\"allowfullscreen\":false,\"lazyload\":false}},\"evals\":[],\"jsHooks\":[]} TL;DR — You can start using this function by installing the forked version on my GitHub: devtools::install_github(repo = \u0026quot;wwwjk366/highcharter\u0026quot;). I have already initiated a pull request and hopefully the maintainer of `highcharter’ can add this function soon.\n ","date":1560384000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1560399110,"objectID":"bbd1896d92b6e6491bbafdff7f5f53fa","permalink":"/post/2019-06-13-add-sunburst/add-sunburst-chart-to-highcharter-package/","publishdate":"2019-06-13T00:00:00Z","relpermalink":"/post/2019-06-13-add-sunburst/add-sunburst-chart-to-highcharter-package/","section":"post","summary":"The highcharter Package The highcharter package link by Joshua Kunst has long been my favorite data visualization package in R. It created a wonderful API to the famous JS Highcharts library. link. Although Highcharts is not free for commercial use, but I found many functionality of it is unparalleled with other visualization packages like ploty or sunburstR or r2d3.\nFor example, you can easily create an interactive scatterplot with ggplot2 like syntax:","tags":["R","Visualization","Package"],"title":"Add Sunburst Chart to highcharter Package","type":"post"},{"authors":[],"categories":[],"content":" Welcome to Slides Academic\nFeatures  Efficiently write slides in Markdown 3-in-1: Create, Present, and Publish your slides Supports speaker notes Mobile friendly slides  Controls  Next: Right Arrow or Space Previous: Left Arrow Start: Home Finish: End Overview: Esc Speaker notes: S Fullscreen: F Zoom: Alt + Click PDF Export: E  Code Highlighting Inline code: variable\nCode block:\nporridge = \u0026quot;blueberry\u0026quot; if porridge == \u0026quot;blueberry\u0026quot;: print(\u0026quot;Eating...\u0026quot;)  Math In-line math: $x + y = z$\nBlock math:\n$$ f\\left( x \\right) = \\;\\frac{{2\\left( {x + 4} \\right)\\left( {x - 4} \\right)}}{{\\left( {x + 4} \\right)\\left( {x + 1} \\right)}} $$\nFragments Make content appear incrementally\n{{% fragment %}} One {{% /fragment %}} {{% fragment %}} **Two** {{% /fragment %}} {{% fragment %}} Three {{% /fragment %}}  Press Space to play!\nOne  Two  Three \nA fragment can accept two optional parameters:\n class: use a custom style (requires definition in custom CSS) weight: sets the order in which a fragment appears  Speaker Notes Add speaker notes to your presentation\n{{% speaker_note %}} - Only the speaker can read these notes - Press `S` key to view {{% /speaker_note %}}  Press the S key to view the speaker notes!\n Only the speaker can read these notes Press S key to view   Themes  black: Black background, white text, blue links (default) white: White background, black text, blue links league: Gray background, white text, blue links beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links   night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links  Custom Slide Customize the slide style and background\n{{\u0026lt; slide background-image=\u0026quot;/img/boards.jpg\u0026quot; \u0026gt;}} {{\u0026lt; slide background-color=\u0026quot;#0000FF\u0026quot; \u0026gt;}} {{\u0026lt; slide class=\u0026quot;my-style\u0026quot; \u0026gt;}}  Custom CSS Example Let\u0026rsquo;s make headers navy colored.\nCreate assets/css/reveal_custom.css with:\n.reveal section h1, .reveal section h2, .reveal section h3 { color: navy; }  Questions? Ask\nDocumentation\n","date":1549324800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1549324800,"objectID":"0e6de1a61aa83269ff13324f3167c1a9","permalink":"/slides/example/","publishdate":"2019-02-05T00:00:00Z","relpermalink":"/slides/example/","section":"slides","summary":"An introduction to using Academic's Slides feature.","tags":[],"title":"Slides","type":"slides"},{"authors":null,"categories":null,"content":"","date":1461715200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1461715200,"objectID":"d1311ddf745551c9e117aa4bb7e28516","permalink":"/project/external-project/","publishdate":"2016-04-27T00:00:00Z","relpermalink":"/project/external-project/","section":"project","summary":"An example of linking directly to an external project website using `external_link`.","tags":["Demo"],"title":"External Project","type":"project"},{"authors":null,"categories":null,"content":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.\nNullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.\nCras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.\nSuspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.\nAliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.\n","date":1461715200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1461715200,"objectID":"8f66d660a9a2edc2d08e68cc30f701f7","permalink":"/project/internal-project/","publishdate":"2016-04-27T00:00:00Z","relpermalink":"/project/internal-project/","section":"project","summary":"An example of using the in-built project page.","tags":["Deep Learning"],"title":"Internal Project","type":"project"}]